<UserControl
	x:Name="sampleRootControl"
	x:Class="ActiproSoftware.ProductSamples.BarsSamples.QuickStarts.ColorPickers.MainControl"
	xmlns="https://github.com/avaloniaui"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:ActiproSoftware.ProductSamples.BarsSamples.QuickStarts.ColorPickers"
	xmlns:actipro="http://schemas.actiprosoftware.com/avaloniaui"
	xmlns:sampleBrowser="using:ActiproSoftware.SampleBrowser"
	>
	<UserControl.Resources>

		<actipro:ComparisonConverter x:Key="NotEqualToComparisonConverter" Operator="NotEqualTo" />

		<!-- Extend a theme for BarGalleryItem that should use circles instead of rectangles -->
		<ControlTheme x:Key="BarGalleryItemCircleTheme" TargetType="{x:Type actipro:BarGalleryItem}" BasedOn="{actipro:ControlTheme BarGalleryItem}">
			<!-- Define a corner radius that matches the circle template so the accented item border will match the template. -->
			<Setter Property="CornerRadius" Value="9" />
		</ControlTheme>

		<!-- Custom DataTemplate used by XAML and MVVM samples to use circles (instead of squares) for gallery items -->
		<DataTemplate x:Key="CircleStyleGalleryItemItemplate" x:DataType="{x:Type actipro:ColorBarGalleryItemViewModel}">
			<!-- The CornerRadius defined here must match the CornerRadius defined by BarGalleryItemCircleTheme -->
			<Border Width="18" Height="18"
				BorderBrush="{actipro:ThemeResource Container3BorderBrush}"
				BorderThickness="1"
				CornerRadius="9">
				<Border.Background>
					<SolidColorBrush Color="{Binding Value}" />
				</Border.Background>
			</Border>
		</DataTemplate>

	</UserControl.Resources>

	
	<sampleBrowser:ControlExampleItemsControl
		Header="The BarMenuGallery control can be configured to provide an advanced color picker similar to those in popular office applications.">

		<sampleBrowser:ControlExample
			Header="Color picker showcase"
			Footer="See the individual samples below for details on how to build the color pickers highlighted by this sample."
			>

			<actipro:Ribbon x:Name="showcaseRibbonMvvm"
				Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
				/>

		</sampleBrowser:ControlExample>



		<sampleBrowser:ControlExample
			Header="Basic usage"
			Footer="Use a BarMenuGallery to display individual gallery items for available colors."
			>

			<sampleBrowser:ControlExample.XamlContent>

				<!-- XAML-based sample -->
				<actipro:Ribbon
					IsApplicationButtonVisible="False"
					IsCollapsible="False"
					IsMinimizable="False"
					LayoutMode="Simplified"
					QuickAccessToolBarMode="None">

					<actipro:RibbonTabItem Key="SampleTab">

						<actipro:RibbonGroup Key="SampleGroup" SmallIcon="/Images/Icons/ColorPicker16.png">

							<actipro:RibbonControlGroup>
								<actipro:BarPopupButton Key="ColorPicker"
									LargeIcon="/Images/Icons/ColorPicker32.png"
									SmallIcon="/Images/Icons/ColorPicker16.png"
									ToolBarItemVariantBehavior="All"
									>
									<actipro:BarMenuGallery Key="ColorPickerGallery"
										DataContext="{Binding #sampleRootControl}"
										AreSurroundingSeparatorsAllowed="{Binding BasicUsageOptions.AreSurroundingSeparatorsAllowed}"
										CanCategorize="{Binding BasicUsageOptions.CanCategorizeOnMenu}"
										Command="{Binding BasicSetColorCommand}"
										ItemSpacing="{Binding BasicUsageOptions.ItemSpacing}"
										MinColumnCount="{Binding BasicUsageOptions.MinColumnCount}"
										MaxColumnCount="{Binding BasicUsageOptions.MaxColumnCount}"
										UseAccentedItemBorder="{Binding BasicUsageOptions.UseAccentedItemBorder}"
										ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}"
										MinItemHeight="{Binding BasicUsageOptions.MinItemLength}"
										MinItemWidth="{Binding BasicUsageOptions.MinItemLength}"
										>
										<actipro:BarMenuGallery.ItemTemplateSelector>
											<actipro:BarGalleryItemTemplateSelector />
										</actipro:BarMenuGallery.ItemTemplateSelector>

										<actipro:ColorBarGalleryItemViewModel Value="Red" />
										<actipro:ColorBarGalleryItemViewModel Value="Orange" />
										<actipro:ColorBarGalleryItemViewModel Value="Yellow" />
										<actipro:ColorBarGalleryItemViewModel Value="Green" />
										<actipro:ColorBarGalleryItemViewModel Value="Blue" />
										<actipro:ColorBarGalleryItemViewModel Value="Purple" />
										<actipro:ColorBarGalleryItemViewModel Value="#ffffff" Label="White" />
										<actipro:ColorBarGalleryItemViewModel Value="#888888" Label="Gray" />
										<actipro:ColorBarGalleryItemViewModel Value="#000000" Label="Black" />

									</actipro:BarMenuGallery>
								</actipro:BarPopupButton>
							</actipro:RibbonControlGroup>
						</actipro:RibbonGroup>


					</actipro:RibbonTabItem>

				</actipro:Ribbon>

			</sampleBrowser:ControlExample.XamlContent>

			<sampleBrowser:ControlExample.MvvmContent>

				<!-- MVVM-based sample -->
				<actipro:Ribbon x:Name="basicUsageRibbonMvvm"
					Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
					/>

			</sampleBrowser:ControlExample.MvvmContent>

			<sampleBrowser:ControlExample.Options>

				<StackPanel Spacing="10" DataContext="{Binding #sampleRootControl.BasicUsageOptions}">
					<CheckBox Content="Use accented item border" IsChecked="{Binding UseAccentedItemBorder}" />
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Item spacing" />
						<NumericUpDown Value="{Binding ItemSpacing}" Minimum="1" Maximum="10" FormatString="0" />
					</StackPanel>
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Min columns" />
						<NumericUpDown Value="{Binding MinColumnCount}" Minimum="1" Maximum="10" FormatString="0" />
					</StackPanel>
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Max columns" />
						<NumericUpDown Value="{Binding MaxColumnCount}" Minimum="2" Maximum="10" FormatString="0" />
					</StackPanel>
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Min item length" />
						<NumericUpDown Value="{Binding MinItemLength}" Minimum="10" Maximum="40" FormatString="0" />
					</StackPanel>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample Kind="Xaml" xml:space="preserve">
					<![CDATA[
<actipro:Ribbon ... >

	<actipro:RibbonTabItem Key="SampleTab">
		<actipro:RibbonGroup Key="SampleGroup" ... >
			<actipro:RibbonControlGroup ... >
			
				<actipro:BarPopupButton Key="ColorPicker"
					LargeIcon="/Images/Icons/ColorPicker32.png"
					SmallIcon="/Images/Icons/ColorPicker16.png"
					ToolBarItemVariantBehavior="All">

					<actipro:BarMenuGallery Key="ColorPickerGallery"$(UseAccentedItemBorderAttribute)
						Command="{Binding BasicSetColorCommand}"$(MinColumnCountAttribute)
						MaxColumnCount="$(MaxColumnCount)"
						ItemSpacing="$(ItemSpacing)"$(MinItemHeightAttribute)$(MaxItemWidthAttribute)
						ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}">

						<!-- Use the pre-defined item templates from Bars MVVM library -->
						<actipro:BarMenuGallery.ItemTemplateSelector>
							<actipro:BarGalleryItemTemplateSelector />
						</actipro:BarMenuGallery.ItemTemplateSelector>

						<!-- Define the available colors using known names or color values (requires Bars MVVM library) -->
						<actipro:ColorBarGalleryItemViewModel Value="Red" />
						<actipro:ColorBarGalleryItemViewModel Value="Orange" />
						<actipro:ColorBarGalleryItemViewModel Value="Yellow" />
						<actipro:ColorBarGalleryItemViewModel Value="Green" />
						<actipro:ColorBarGalleryItemViewModel Value="Blue" />
						<actipro:ColorBarGalleryItemViewModel Value="Purple" />
						<actipro:ColorBarGalleryItemViewModel Value="#ffffff" Label="White" />
						<actipro:ColorBarGalleryItemViewModel Value="#000000" Label="Black" />

					</actipro:BarMenuGallery>

				</actipro:BarPopupButton>
				
			</actipro:RibbonControlGroup>
		</actipro:RibbonGroup>
	</actipro:RibbonTabItem>

	...

</actipro:Ribbon>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="ItemSpacing" Value="{Binding #sampleRootControl.BasicUsageOptions.ItemSpacing}" />
						<sampleBrowser:CodeExampleSubstitution Key="MinColumnCountAttribute"
															   Value="{Binding #sampleRootControl.BasicUsageOptions.MinColumnCount, StringFormat='&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MinColumnCount=&quot;{0}&quot;'}">
							<sampleBrowser:CodeExampleSubstitution.IsEnabled>
								<Binding Path="#sampleRootControl.BasicUsageOptions.MinColumnCount" Converter="{StaticResource NotEqualToComparisonConverter}">
									<Binding.ConverterParameter>
										<x:Int32>1</x:Int32>
									</Binding.ConverterParameter>
								</Binding>
							</sampleBrowser:CodeExampleSubstitution.IsEnabled>
						</sampleBrowser:CodeExampleSubstitution>
						<sampleBrowser:CodeExampleSubstitution Key="MaxColumnCount" Value="{Binding #sampleRootControl.BasicUsageOptions.MaxColumnCount}" />
						<sampleBrowser:CodeExampleSubstitution Key="MinItemHeightAttribute"
															   Value="{Binding #sampleRootControl.BasicUsageOptions.MinItemLength, StringFormat='&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MinItemHeight=&quot;{0}&quot;'}">
							<sampleBrowser:CodeExampleSubstitution.IsEnabled>
								<Binding Path="#sampleRootControl.BasicUsageOptions.MinItemLength" Converter="{StaticResource NotEqualToComparisonConverter}">
									<Binding.ConverterParameter>
										<x:Int32>16</x:Int32>
									</Binding.ConverterParameter>
								</Binding>
							</sampleBrowser:CodeExampleSubstitution.IsEnabled>
						</sampleBrowser:CodeExampleSubstitution>
						<sampleBrowser:CodeExampleSubstitution Key="MaxItemWidthAttribute"
															   Value="{Binding #sampleRootControl.BasicUsageOptions.MinItemLength, StringFormat='&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MinItemWidth=&quot;{0}&quot;'}">
							<sampleBrowser:CodeExampleSubstitution.IsEnabled>
								<Binding Path="#sampleRootControl.BasicUsageOptions.MinItemLength" Converter="{StaticResource NotEqualToComparisonConverter}">
									<Binding.ConverterParameter>
										<x:Int32>16</x:Int32>
									</Binding.ConverterParameter>
								</Binding>
							</sampleBrowser:CodeExampleSubstitution.IsEnabled>
						</sampleBrowser:CodeExampleSubstitution>
						<sampleBrowser:CodeExampleSubstitution Key="UseAccentedItemBorderAttribute"
															   IsEnabled="{Binding #sampleRootControl.BasicUsageOptions.UseAccentedItemBorder}"
															   Value="&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;UseAccentedItemBorder=&quot;True&quot;" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" xml:space="preserve">
					<![CDATA[
<!-- DataContext is bound to an instance of RibbonViewModel -->
<actipro:Ribbon
	DataContext="{Binding #sampleRootControl.BasicUsageRibbonViewModel}"
	Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
	/>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;

public partial class SampleRootControl : UserControl {

	/// <summary>
	/// Creates the ribbon view model.
	/// </summary>
	private static void CreateBasicUsageRibbonViewModel() {
		return new RibbonViewModel() {
			Tabs = {
				new RibbonTabViewModel("SampleTab") {
					Groups = {
						new RibbonGroupViewModel("SampleGroup") {
							Items = {
								new BarPopupButtonViewModel("ColorPicker") {
									LargeIcon = ImageLoader.GetIcon("ColorPicker32.png"),
									SmallIcon = ImageLoader.GetIcon("ColorPicker16.png"),
									ToolBarItemVariantBehavior = ItemVariantBehavior.All,
									MenuItems = {

										new BarGalleryViewModel("ColorPickerGallery") {
											ItemTemplateSelector = new BarGalleryItemTemplateSelector(),$(UseAccentedItemBorderSetter)
											Command = BasicSetColorCommand,
											ItemSpacing = $(ItemSpacing),$(MinColumnCountSetter)
											MaxMenuColumnCount = $(MaxColumnCount),$(MinItemHeightSetter)$(MinItemWidthSetter)
											Items = new [] {
												new ColorBarGalleryItemViewModel(Colors.Red),
												new ColorBarGalleryItemViewModel(Colors.Orange),
												new ColorBarGalleryItemViewModel(Colors.Yellow),
												new ColorBarGalleryItemViewModel(Colors.Green),
												new ColorBarGalleryItemViewModel(Colors.Blue),
												new ColorBarGalleryItemViewModel(Colors.Purple),
												new ColorBarGalleryItemViewModel(UIColor.Parse("#ffffff")) { Label = "White" },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#888888")) { Label = "Gray" },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#000000")) { Label = "Black" },
											}
										}

									}
								},
							},
						},
					}
				},
			}
			...
		};
	}

	/// <summary>
	/// Gets the view model to be bound to the ribbon.
	/// </summary>
	public RibbonViewModel BasicUsageRibbonViewModel { get; }
		= CreateBasicUsageRibbonViewModel();

	/// <summary>
	/// A basic command to be executed for selecting a color from a color picker.
	/// </summary>
	public ICommand BasicSetColorCommand { get; } = new DelegateCommand<ColorBarGalleryItemViewModel>(
			param => {
				if (param is {} selectedViewModel) {
					// Process the newly selected color here
				}
			}
		);

}
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="ItemSpacing" Value="{Binding #sampleRootControl.BasicUsageOptions.ItemSpacing}" />
						<sampleBrowser:CodeExampleSubstitution Key="MinColumnCountSetter"
															   Value="{Binding #sampleRootControl.BasicUsageOptions.MinColumnCount, StringFormat='&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MinMenuColumnCount = {0},'}">
							<sampleBrowser:CodeExampleSubstitution.IsEnabled>
								<Binding Path="#sampleRootControl.BasicUsageOptions.MinColumnCount" Converter="{StaticResource NotEqualToComparisonConverter}">
									<Binding.ConverterParameter>
										<x:Int32>1</x:Int32>
									</Binding.ConverterParameter>
								</Binding>
							</sampleBrowser:CodeExampleSubstitution.IsEnabled>
						</sampleBrowser:CodeExampleSubstitution>
						<sampleBrowser:CodeExampleSubstitution Key="MaxColumnCount" Value="{Binding #sampleRootControl.BasicUsageOptions.MaxColumnCount}" />
						<sampleBrowser:CodeExampleSubstitution Key="MinItemHeightSetter"
															   Value="{Binding #sampleRootControl.BasicUsageOptions.MinItemLength, StringFormat='&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MinItemHeight = {0},'}">
							<sampleBrowser:CodeExampleSubstitution.IsEnabled>
								<Binding Path="#sampleRootControl.BasicUsageOptions.MinItemLength" Converter="{StaticResource NotEqualToComparisonConverter}">
									<Binding.ConverterParameter>
										<x:Int32>16</x:Int32>
									</Binding.ConverterParameter>
								</Binding>
							</sampleBrowser:CodeExampleSubstitution.IsEnabled>
						</sampleBrowser:CodeExampleSubstitution>
						<sampleBrowser:CodeExampleSubstitution Key="MinItemWidthSetter"
															   Value="{Binding #sampleRootControl.BasicUsageOptions.MinItemLength, StringFormat='&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MinItemWidth = {0},'}">
							<sampleBrowser:CodeExampleSubstitution.IsEnabled>
								<Binding Path="#sampleRootControl.BasicUsageOptions.MinItemLength" Converter="{StaticResource NotEqualToComparisonConverter}">
									<Binding.ConverterParameter>
										<x:Int32>16</x:Int32>
									</Binding.ConverterParameter>
								</Binding>
							</sampleBrowser:CodeExampleSubstitution.IsEnabled>
						</sampleBrowser:CodeExampleSubstitution>
						<sampleBrowser:CodeExampleSubstitution Key="UseAccentedItemBorderSetter"
															   IsEnabled="{Binding #sampleRootControl.BasicUsageOptions.UseAccentedItemBorder}"
															   Value="&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;UseAccentedItemBorder = true," />
						<sampleBrowser:CodeExampleSubstitution Key="AreSurroundingSeparatorsAllowedSetter"
															   IsEnabled="{Binding !#sampleRootControl.BasicUsageOptions.AreSurroundingSeparatorsAllowed}"
															   Value="&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AreSurroundingSeparatorsAllowed = false," />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Layout behavior"
			Footer="Use LayoutBehavior to appear like a menu item, a default stand-alone color swatch, or a grouped color swatch."
			>

			<sampleBrowser:ControlExample.XamlContent>

				<!-- XAML-based sample -->
				<actipro:Ribbon
					IsApplicationButtonVisible="False"
					IsCollapsible="False"
					IsMinimizable="False"
					LayoutMode="Simplified"
					QuickAccessToolBarMode="None">

					<actipro:RibbonTabItem Key="SampleTab">

						<actipro:RibbonGroup Key="SampleGroup" SmallIcon="/Images/Icons/ColorPicker16.png">

							<actipro:RibbonControlGroup>
								<actipro:BarPopupButton Key="ColorPicker"
									LargeIcon="/Images/Icons/ColorPicker32.png"
									SmallIcon="/Images/Icons/ColorPicker16.png"
									ToolBarItemVariantBehavior="All">

									<!-- MinColumnCount/MaxColumnCount must be set to the number of colors per grouped row for proper layout -->
									<actipro:BarMenuGallery Key="ColorPickerGallery"
										Command="{Binding #sampleRootControl.BasicSetColorCommand}"
										ItemSpacing="4"
										MinColumnCount="5" MaxColumnCount="5"
										MinItemHeight="22" MinItemWidth="22"
										UseAccentedItemBorder="True"
										ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}"
										>
										<actipro:BarMenuGallery.ItemTemplateSelector>
											<actipro:BarGalleryItemTemplateSelector />
										</actipro:BarMenuGallery.ItemTemplateSelector>

										<actipro:ColorBarGalleryItemViewModel Value="Black" Label="Automatic" Description="LayoutBehavior = MenuItem" LayoutBehavior="MenuItem" />

										<actipro:ColorBarGalleryItemViewModel Value="#ed7d31" Description="LayoutBehavior = Default" LayoutBehavior="Default" />
										<actipro:ColorBarGalleryItemViewModel Value="#a5a5a5" Description="LayoutBehavior = Default" LayoutBehavior="Default" />
										<actipro:ColorBarGalleryItemViewModel Value="#ffc000" Description="LayoutBehavior = Default" LayoutBehavior="Default" />
										<actipro:ColorBarGalleryItemViewModel Value="#5b9bd5" Description="LayoutBehavior = Default" LayoutBehavior="Default" />
										<actipro:ColorBarGalleryItemViewModel Value="#70ad47" Description="LayoutBehavior = Default" LayoutBehavior="Default" />

										<actipro:ColorBarGalleryItemViewModel Value="#fbe5d5" Description="LayoutBehavior = GroupStart" LayoutBehavior="GroupStart" />
										<actipro:ColorBarGalleryItemViewModel Value="#ededed" Description="LayoutBehavior = GroupStart" LayoutBehavior="GroupStart" />
										<actipro:ColorBarGalleryItemViewModel Value="#fff2cc" Description="LayoutBehavior = GroupStart" LayoutBehavior="GroupStart" />
										<actipro:ColorBarGalleryItemViewModel Value="#deebf6" Description="LayoutBehavior = GroupStart" LayoutBehavior="GroupStart" />
										<actipro:ColorBarGalleryItemViewModel Value="#e2efd9" Description="LayoutBehavior = GroupStart" LayoutBehavior="GroupStart" />

										<actipro:ColorBarGalleryItemViewModel Value="#f4b183" Description="LayoutBehavior = GroupInner" LayoutBehavior="GroupInner" />
										<actipro:ColorBarGalleryItemViewModel Value="#c9c9c9" Description="LayoutBehavior = GroupInner" LayoutBehavior="GroupInner" />
										<actipro:ColorBarGalleryItemViewModel Value="#ffd965" Description="LayoutBehavior = GroupInner" LayoutBehavior="GroupInner" />
										<actipro:ColorBarGalleryItemViewModel Value="#9cc3e5" Description="LayoutBehavior = GroupInner" LayoutBehavior="GroupInner" />
										<actipro:ColorBarGalleryItemViewModel Value="#a8d08d" Description="LayoutBehavior = GroupInner" LayoutBehavior="GroupInner" />

										<actipro:ColorBarGalleryItemViewModel Value="#833c0b" Description="LayoutBehavior = GroupEnd" LayoutBehavior="GroupEnd" />
										<actipro:ColorBarGalleryItemViewModel Value="#525252" Description="LayoutBehavior = GroupEnd" LayoutBehavior="GroupEnd" />
										<actipro:ColorBarGalleryItemViewModel Value="#7f6000" Description="LayoutBehavior = GroupEnd" LayoutBehavior="GroupEnd" />
										<actipro:ColorBarGalleryItemViewModel Value="#1e4e79" Description="LayoutBehavior = GroupEnd" LayoutBehavior="GroupEnd" />
										<actipro:ColorBarGalleryItemViewModel Value="#375623" Description="LayoutBehavior = GroupEnd" LayoutBehavior="GroupEnd" />

									</actipro:BarMenuGallery>
								</actipro:BarPopupButton>
							</actipro:RibbonControlGroup>
						</actipro:RibbonGroup>

					</actipro:RibbonTabItem>

				</actipro:Ribbon>

			</sampleBrowser:ControlExample.XamlContent>

			<sampleBrowser:ControlExample.MvvmContent>

				<!-- MVVM-based sample -->
				<actipro:Ribbon x:Name="layoutBehaviorRibbonMvvm"
					Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
					/>

			</sampleBrowser:ControlExample.MvvmContent>

			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample Kind="Xaml" xml:space="preserve">
					<![CDATA[
<actipro:Ribbon ... >

	<actipro:RibbonTabItem Key="SampleTab">
		<actipro:RibbonGroup Key="SampleGroup" ... >
			<actipro:RibbonControlGroup ... >
			
				<actipro:BarPopupButton Key="ColorPicker" ... >

					<!-- Max and Min column counts must be set to the number of colors per grouped row for proper layout -->
					<actipro:BarMenuGallery Key="ColorPickerGallery" ...
						ItemSpacing="4"
						MinColumnCount="5" MaxColumnCount="5"
						MinItemHeight="22" MinItemWidth="22"
						ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}">

						<actipro:BarMenuGallery.ItemTemplateSelector>
							<actipro:BarGalleryItemTemplateSelector />
						</actipro:BarMenuGallery.ItemTemplateSelector>

						<!-- Menu item -->
						<actipro:ColorBarGalleryItemViewModel Value="Black" Label="Automatic" LayoutBehavior="MenuItem" />

						<!-- Default stand-alone color swatches -->
						<actipro:ColorBarGalleryItemViewModel Value="#ed7d31" LayoutBehavior="Default" />
						<actipro:ColorBarGalleryItemViewModel Value="#a5a5a5" LayoutBehavior="Default" />
						<actipro:ColorBarGalleryItemViewModel Value="#ffc000" LayoutBehavior="Default" />
						<actipro:ColorBarGalleryItemViewModel Value="#5b9bd5" LayoutBehavior="Default" />
						<actipro:ColorBarGalleryItemViewModel Value="#70ad47" LayoutBehavior="Default" />

						<!-- Groups of colors in 5 columns with 3 rows (start row) -->
						<actipro:ColorBarGalleryItemViewModel Value="#fbe5d5" LayoutBehavior="GroupStart" />
						<actipro:ColorBarGalleryItemViewModel Value="#ededed" LayoutBehavior="GroupStart" />
						<actipro:ColorBarGalleryItemViewModel Value="#fff2cc" LayoutBehavior="GroupStart" />
						<actipro:ColorBarGalleryItemViewModel Value="#deebf6" LayoutBehavior="GroupStart" />
						<actipro:ColorBarGalleryItemViewModel Value="#e2efd9" LayoutBehavior="GroupStart" />

						<!-- Groups of colors in 5 columns with 3 rows (inner row) -->
						<actipro:ColorBarGalleryItemViewModel Value="#f4b183" LayoutBehavior="GroupInner" />
						<actipro:ColorBarGalleryItemViewModel Value="#c9c9c9" LayoutBehavior="GroupInner" />
						<actipro:ColorBarGalleryItemViewModel Value="#ffd965" LayoutBehavior="GroupInner" />
						<actipro:ColorBarGalleryItemViewModel Value="#9cc3e5" LayoutBehavior="GroupInner" />
						<actipro:ColorBarGalleryItemViewModel Value="#a8d08d" LayoutBehavior="GroupInner" />

						<!-- Groups of colors in 5 columns with 3 rows (end row) -->
						<actipro:ColorBarGalleryItemViewModel Value="#833c0b" LayoutBehavior="GroupEnd" />
						<actipro:ColorBarGalleryItemViewModel Value="#525252" LayoutBehavior="GroupEnd" />
						<actipro:ColorBarGalleryItemViewModel Value="#7f6000" LayoutBehavior="GroupEnd" />
						<actipro:ColorBarGalleryItemViewModel Value="#1e4e79" LayoutBehavior="GroupEnd" />
						<actipro:ColorBarGalleryItemViewModel Value="#375623" LayoutBehavior="GroupEnd" />

					</actipro:BarMenuGallery>

				</actipro:BarPopupButton>
				
			</actipro:RibbonControlGroup>
		</actipro:RibbonGroup>
	</actipro:RibbonTabItem>

	...

</actipro:Ribbon>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" xml:space="preserve">
					<![CDATA[
<!-- DataContext is bound to an instance of RibbonViewModel -->
<actipro:Ribbon
	DataContext="{Binding #sampleRootControl.LayoutBehaviorRibbonViewModel}"
	Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
	/>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;

public partial class SampleRootControl : UserControl {

	/// <summary>
	/// Creates the ribbon view model.
	/// </summary>
	private static void CreateLayoutBehaviorRibbonViewModel() {
		return new RibbonViewModel() {
			Tabs = {
				new RibbonTabViewModel("SampleTab") {
					Groups = {
						new RibbonGroupViewModel("SampleGroup") {
							Items = {
								new BarPopupButtonViewModel("ColorPicker") {
									...
									MenuItems = {

										new BarGalleryViewModel("ColorPickerGallery") {
											...
											ItemTemplateSelector = new BarGalleryItemTemplateSelector(),
											ItemSpacing = 4,
											MinMenuColumnCount = 5, // Max & Min column counts must be set to the number of colors per grouped row for proper layout
											MaxMenuColumnCount = 5,
											MinItemHeight = 22,
											MinItemWidth = 22,
											Items = new[] {

												// Menu item
												new ColorBarGalleryItemViewModel(Colors.Black) { Label = "Automatic", LayoutBehavior = BarGalleryItemLayoutBehavior.MenuItem },

												// Default stand-alone color swatches
												new ColorBarGalleryItemViewModel(UIColor.Parse("#ed7d31")),
												new ColorBarGalleryItemViewModel(UIColor.Parse("#a5a5a5")),
												new ColorBarGalleryItemViewModel(UIColor.Parse("#ffc000")),
												new ColorBarGalleryItemViewModel(UIColor.Parse("#5b9bd5")),
												new ColorBarGalleryItemViewModel(UIColor.Parse("#70ad47")),

												// Groups of colors in 5 columns with 3 rows (start row)
												new ColorBarGalleryItemViewModel(UIColor.Parse("#fbe5d5")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupStart },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#ededed")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupStart },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#fff2cc")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupStart },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#deebf6")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupStart },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#e2efd9")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupStart },

												// Groups of colors in 5 columns with 3 rows (inner row)
												new ColorBarGalleryItemViewModel(UIColor.Parse("#f4b183")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupInner },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#c9c9c9")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupInner },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#ffd965")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupInner },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#9cc3e5")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupInner },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#a8d08d")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupInner },

												// Groups of colors in 5 columns with 3 rows (end row)
												new ColorBarGalleryItemViewModel(UIColor.Parse("#833c0b")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupEnd },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#525252")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupEnd },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#7f6000")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupEnd },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#1e4e79")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupEnd },
												new ColorBarGalleryItemViewModel(UIColor.Parse("#375623")) { LayoutBehavior = BarGalleryItemLayoutBehavior.GroupEnd },

											}
										}

									}
								},
							},
						},
					}
				},
			}
			...
		};
	}

	/// <summary>
	/// Gets the view model to be bound to the ribbon.
	/// </summary>
	public RibbonViewModel LayoutBehaviorRibbonViewModel { get; }
		= CreateLayoutBehaviorRibbonViewModel();

}
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Default color usage"
			Footer="A default collection of commonly used colors is available which includes multiple shades of theme colors."
			>

			<sampleBrowser:ControlExample.XamlContent>

				<!-- XAML-based sample -->
				<actipro:Ribbon
					IsApplicationButtonVisible="False"
					IsCollapsible="False"
					IsMinimizable="False"
					LayoutMode="Simplified"
					QuickAccessToolBarMode="None">

					<actipro:RibbonTabItem Key="SampleTab">

						<actipro:RibbonGroup Key="SampleGroup" SmallIcon="/Images/Icons/ColorPicker16.png">

							<actipro:RibbonControlGroup>
								<actipro:BarPopupButton Key="ColorPicker"
									LargeIcon="/Images/Icons/ColorPicker32.png"
									SmallIcon="/Images/Icons/ColorPicker16.png"
									ToolBarItemVariantBehavior="All">

									<!-- MinColumnCount/MaxColumnCount must be set to the number of colors per grouped row for proper layout -->
									<actipro:BarMenuGallery Label="ColorPickerGallery"
										ItemsSource="{Binding #sampleRootControl.DefaultColorItemsView}"
										Command="{Binding #sampleRootControl.BasicSetColorCommand}"
										ItemSpacing="4"
										MinColumnCount="10" MaxColumnCount="10"
										UseAccentedItemBorder="True"
										ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}"
										>
										<actipro:BarMenuGallery.ItemTemplateSelector>
											<actipro:BarGalleryItemTemplateSelector />
										</actipro:BarMenuGallery.ItemTemplateSelector>
									</actipro:BarMenuGallery>
								</actipro:BarPopupButton>
							</actipro:RibbonControlGroup>
						</actipro:RibbonGroup>


					</actipro:RibbonTabItem>

				</actipro:Ribbon>

			</sampleBrowser:ControlExample.XamlContent>

			<sampleBrowser:ControlExample.MvvmContent>

				<actipro:Ribbon x:Name="defaultColorsRibbonMvvm"
					Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
					/>

			</sampleBrowser:ControlExample.MvvmContent>

			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample Kind="Xaml" xml:space="preserve">
					<![CDATA[
<actipro:Ribbon ... >

	<actipro:RibbonTabItem Key="SampleTab">
		<actipro:RibbonGroup Key="SampleGroup" ... >
			<actipro:RibbonControlGroup ... >
			
				<actipro:BarPopupButton Key="ColorPicker" ... >

					<!-- Max and Min column counts must be set to the number of colors per grouped row for proper layout -->
					<actipro:BarMenuGallery Key="ColorPickerGallery" ...
						ItemsSource="{Binding #sampleRootControl.DefaultColorItemsView}"
						ItemSpacing="4"
						MinColumnCount="10" MaxColumnCount="10"
						ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}">

						<actipro:BarMenuGallery.ItemTemplateSelector>
							<actipro:BarGalleryItemTemplateSelector />
						</actipro:BarMenuGallery.ItemTemplateSelector>

					</actipro:BarMenuGallery>

				</actipro:BarPopupButton>
				
			</actipro:RibbonControlGroup>
		</actipro:RibbonGroup>
	</actipro:RibbonTabItem>

	...

</actipro:Ribbon>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Xaml" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;
using ActiproSoftware.UI.Avalonia.Data;

public partial class SampleRootControl : UserControl {

	/// <summary>
	/// The gallery item view models for a color picker using the default collection.
	/// </summary>
	public ICollectionView DefaultColorItemsView { get; }
		// The default collection in ColorBarGalleryItemViewModel is based on 70 colors:
		// - The first 10 colors are the base theme colors.
		// - The next 10 colors are the first of five alternate shades for each base theme color (BarGalleryItemLayoutBehavior.GroupStart).
		// - The next 10 colors are the second of five alternate shades (BarGalleryItemLayoutBehavior.GroupInner).
		// - The next 10 colors are the third of five alternate shades (BarGalleryItemLayoutBehavior.GroupInner).
		// - The next 10 colors are the forth of five alternate shades (BarGalleryItemLayoutBehavior.GroupInner).
		// - The next 10 colors are the last of five alternate shades (BarGalleryItemLayoutBehavior.GroupEnd).
		// - The last 10 colors are standard colors that will not have alternate shades.
		//
		// The BarMenuGallery should be configured with with a fixed size of 10 columns to properly display these colors
		= BarGalleryViewModel.CreateCollectionView(ColorBarGalleryItemViewModel.CreateDefaultColorPickerCollection(), categorize: true);

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" xml:space="preserve">
					<![CDATA[
<!-- DataContext is bound to an instance of RibbonViewModel -->
<actipro:Ribbon
	DataContext="{Binding #sampleRootControl.DefaultColorsRibbonViewModel}"
	Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
	/>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;

public partial class SampleRootControl : UserControl {

	/// <summary>
	/// Creates the ribbon view model.
	/// </summary>
	private static void CreateDefaultColorsRibbonViewModel() {
		return new RibbonViewModel() {
			Tabs = {
				new RibbonTabViewModel("SampleTab") {
					Groups = {
						new RibbonGroupViewModel("SampleGroup") {
							Items = {
								new BarPopupButtonViewModel("ColorPicker") {
									...
									MenuItems = {

										new BarGalleryViewModel("ColorPickerGallery") {
											...
											ItemTemplateSelector = new BarGalleryItemTemplateSelector(),
											ItemSpacing = 4,
											MinMenuColumnCount = 10, // Max & Min column counts must be set to the number of colors per grouped row for proper layout
											MaxMenuColumnCount = 10,
											Items = BarGalleryViewModel.CreateCollectionView(
												ColorBarGalleryItemViewModel.CreateDefaultColorPickerCollection(),
												categorize: true
											),
										}

									}
								},
							},
						},
					}
				},
			}
			...
		};
	}

	/// <summary>
	/// Gets the view model to be bound to the ribbon.
	/// </summary>
	public RibbonViewModel DefaultColorsRibbonViewModel { get; }
		= CreateDefaultColorsRibbonViewModel();

}
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Custom color usage"
			Footer="Customize the color selection and auto-generate multiple shades from a base color."
			>

			<sampleBrowser:ControlExample.XamlContent>

				<!-- XAML-based sample -->
				<actipro:Ribbon
					IsApplicationButtonVisible="False"
					IsCollapsible="False"
					IsMinimizable="False"
					LayoutMode="Simplified"
					QuickAccessToolBarMode="None">

					<actipro:RibbonTabItem Key="SampleTab">

						<actipro:RibbonGroup Key="SampleGroup" SmallIcon="/Images/Icons/ColorPicker16.png">

							<actipro:RibbonControlGroup>
								<actipro:BarPopupButton Key="ColorPicker"
									LargeIcon="/Images/Icons/ColorPicker32.png"
									SmallIcon="/Images/Icons/ColorPicker16.png"
									ToolBarItemVariantBehavior="All">

									<!-- MinColumnCount/MaxColumnCount must be set to the number of colors per grouped row for proper layout -->
									<actipro:BarMenuGallery Label="ColorPickerGallery"
										ItemsSource="{Binding #sampleRootControl.CustomColorItemsView}"
										Command="{Binding #sampleRootControl.BasicSetColorCommand}"
										ItemSpacing="4"
										MinColumnCount="8" MaxColumnCount="8"
										UseAccentedItemBorder="True"
										ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}"
										>
										<actipro:BarMenuGallery.ItemTemplateSelector>
											<actipro:BarGalleryItemTemplateSelector />
										</actipro:BarMenuGallery.ItemTemplateSelector>
									</actipro:BarMenuGallery>
								</actipro:BarPopupButton>
							</actipro:RibbonControlGroup>
						</actipro:RibbonGroup>


					</actipro:RibbonTabItem>

				</actipro:Ribbon>

			</sampleBrowser:ControlExample.XamlContent>

			<sampleBrowser:ControlExample.MvvmContent>

				<actipro:Ribbon x:Name="customColorsRibbonMvvm"
					Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
					/>

			</sampleBrowser:ControlExample.MvvmContent>

			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample Kind="Xaml" xml:space="preserve">
					<![CDATA[
<actipro:Ribbon ... >

	<actipro:RibbonTabItem Key="SampleTab">
		<actipro:RibbonGroup Key="SampleGroup" ... >
			<actipro:RibbonControlGroup ... >
			
				<actipro:BarPopupButton Key="ColorPicker" ... >

					<!-- Max and Min column counts must be set to the number of colors per grouped row for proper layout -->
					<actipro:BarMenuGallery Key="ColorPickerGallery" ...
						ItemsSource="{Binding #sampleRootControl.CustomColorItemsView}"
						ItemSpacing="4"
						MinColumnCount="8" MaxColumnCount="8"
						ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}">

						<actipro:BarMenuGallery.ItemTemplateSelector>
							<actipro:BarGalleryItemTemplateSelector />
						</actipro:BarMenuGallery.ItemTemplateSelector>

					</actipro:BarMenuGallery>

				</actipro:BarPopupButton>
				
			</actipro:RibbonControlGroup>
		</actipro:RibbonGroup>
	</actipro:RibbonTabItem>

	...

</actipro:Ribbon>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Xaml" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;
using ActiproSoftware.UI.Avalonia.Data;

public partial class SampleRootControl : UserControl {

	private ICollectionView? _customColorItemsView;
	
	/// <summary>
	/// The gallery item view models for a color picker using custom colors and auto-generated shades.
	/// </summary>
	public ICollectionView CustomColorItemsView {
		get {
			if (_customColorItemsView is null) {

				// Define the base colors
				var category = "Custom Theme Colors";
				var customBaseThemeColors = new ColorBarGalleryItemViewModel[] {
					new (UIColor.Parse("#dfe3e5"), category, "Ice Blue"),
					new (UIColor.Parse("#335b74"), category, "Dark Teal"),
					new (UIColor.Parse("#1cade4"), category, "Turquoise"),
					new (UIColor.Parse("#2683c6"), category, "Blue"),
					new (UIColor.Parse("#27ced7"), category, "Turquoise"),
					new (UIColor.Parse("#42ba97"), category, "Green"),
					new (UIColor.Parse("#3e8853"), category, "Dark Green"),
					new (UIColor.Parse("#62a39f"), category, "Teal"),
				};

				// ColorBarGalleryItemViewModel.CreateShadedCollection can be used to create a new collection that includes
				// all of the given base colors plus 5 additional shades for each color. The LayoutBehavior of each
				// collection of shades is configured to display the shades as a group.
				// - The first 8 colors are the base theme colors.
				// - The next 8 colors are the first of five alternate shades for each base theme color (BarGalleryItemLayoutBehavior.GroupStart).
				// - The next 8 colors are the second of five alternate shades (BarGalleryItemLayoutBehavior.GroupInner).
				// - The next 8 colors are the third of five alternate shades (BarGalleryItemLayoutBehavior.GroupInner).
				// - The next 8 colors are the forth of five alternate shades (BarGalleryItemLayoutBehavior.GroupInner).
				// - The next 8 colors are the last of five alternate shades (BarGalleryItemLayoutBehavior.GroupEnd).
				//
				// The BarMenuGallery should be configured with with a fixed size of 8 columns to properly display these colors
				_customColorItemsView = BarGalleryViewModel.CreateCollectionView(
					ColorBarGalleryItemViewModel.CreateShadedCollection(customBaseThemeColors),
					categorize: true
				);

			}
			return _customColorItemsView;
		}
	}

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" xml:space="preserve">
					<![CDATA[
<!-- DataContext is bound to an instance of RibbonViewModel -->
<actipro:Ribbon
	DataContext="{Binding #sampleRootControl.CustomColorsRibbonViewModel}"
	Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
	/>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;
using ActiproSoftware.UI.Avalonia.Data;

public partial class SampleRootControl : UserControl {

	private ICollectionView? _customColorItemsView;
	
	/// <summary>
	/// Creates the ribbon view model.
	/// </summary>
	private static void CreateCustomColorsRibbonViewModel() {
		return new RibbonViewModel() {
			Tabs = {
				new RibbonTabViewModel("SampleTab") {
					Groups = {
						new RibbonGroupViewModel("SampleGroup") {
							Items = {
								new BarPopupButtonViewModel("ColorPicker") {
									...
									MenuItems = {

										new BarGalleryViewModel("ColorPickerGallery") {
											...
											ItemTemplateSelector = new BarGalleryItemTemplateSelector(),
											ItemSpacing = 4,
											MinMenuColumnCount = 8, // Max & Min column counts must be set to the number of colors per grouped row for proper layout
											MaxMenuColumnCount = 8,
											Items = CustomColorItemsView,
										}

									}
								},
							},
						},
					}
				},
			}
			...
		};
	}

	/// <summary>
	/// The gallery item view models for a color picker using custom colors and auto-generated shades.
	/// </summary>
	public ICollectionView CustomColorItems {
		get {
			if (_customColorItemsView is null) {

				// Define the base colors
				var category = "Custom Theme Colors";
				var customBaseThemeColors = new ColorBarGalleryItemViewModel[] {
					new (UIColor.Parse("#dfe3e5"), category, "Ice Blue"),
					new (UIColor.Parse("#335b74"), category, "Dark Teal"),
					new (UIColor.Parse("#1cade4"), category, "Turquoise"),
					new (UIColor.Parse("#2683c6"), category, "Blue"),
					new (UIColor.Parse("#27ced7"), category, "Turquoise"),
					new (UIColor.Parse("#42ba97"), category, "Green"),
					new (UIColor.Parse("#3e8853"), category, "Dark Green"),
					new (UIColor.Parse("#62a39f"), category, "Teal"),
				};

				// ColorBarGalleryItemViewModel.CreateShadedCollection can be used to create a new collection that includes
				// all of the given base colors plus 5 additional shades for each color. The LayoutBehavior of each
				// collection of shades is configured to display the shades as a group.
				// - The first 8 colors are the base theme colors.
				// - The next 8 colors are the first of five alternate shades for each base theme color (BarGalleryItemLayoutBehavior.GroupStart).
				// - The next 8 colors are the second of five alternate shades (BarGalleryItemLayoutBehavior.GroupInner).
				// - The next 8 colors are the third of five alternate shades (BarGalleryItemLayoutBehavior.GroupInner).
				// - The next 8 colors are the forth of five alternate shades (BarGalleryItemLayoutBehavior.GroupInner).
				// - The next 8 colors are the last of five alternate shades (BarGalleryItemLayoutBehavior.GroupEnd).
				//
				// The BarMenuGallery should be configured with with a fixed size of 8 columns to properly display these colors
				_customColorItemsView = BarGalleryViewModel.CreateCollectionView(
					ColorBarGalleryItemViewModel.CreateShadedCollection(customBaseThemeColors),
					categorize: true
				);

			}
			return _customColorItemsView;
		}
	}

	/// <summary>
	/// Gets the view model to be bound to the ribbon.
	/// </summary>
	public RibbonViewModel CustomColorsRibbonViewModel { get; }
		= CreateCustomColorsRibbonViewModel();

}
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Preview color command"
			Footer="A PreviewableDelegateCommand can be used to enable a preview of a color before it is selected."
			>

			<sampleBrowser:ControlExample.XamlContent>

				<!-- XAML-based sample -->
				<actipro:Ribbon
					IsApplicationButtonVisible="False"
					IsCollapsible="False"
					IsMinimizable="False"
					LayoutMode="Simplified"
					QuickAccessToolBarMode="None">

					<actipro:RibbonTabItem Key="SampleTab">

						<actipro:RibbonGroup Key="SampleGroup" SmallIcon="/Images/Icons/ColorPicker16.png">

							<actipro:RibbonControlGroup>
								<actipro:BarPopupButton Key="ColorPicker"
									LargeIcon="/Images/Icons/ColorPicker32.png"
									SmallIcon="/Images/Icons/ColorPicker16.png"
									ToolBarItemVariantBehavior="All">

									<actipro:BarMenuGallery Label="ColorPickerGallery"
										ItemsSource="{Binding #sampleRootControl.DefaultColorItemsView}"
										Command="{Binding #sampleRootControl.PreviewCommandOptions.SetColorCommand}"
										ItemSpacing="4"
										MinColumnCount="10" MaxColumnCount="10"
										UseAccentedItemBorder="True"
										ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}"
										>
										<actipro:BarMenuGallery.ItemTemplateSelector>
											<actipro:BarGalleryItemTemplateSelector />
										</actipro:BarMenuGallery.ItemTemplateSelector>
									</actipro:BarMenuGallery>
								</actipro:BarPopupButton>
							</actipro:RibbonControlGroup>
						</actipro:RibbonGroup>


					</actipro:RibbonTabItem>

				</actipro:Ribbon>

			</sampleBrowser:ControlExample.XamlContent>

			<sampleBrowser:ControlExample.MvvmContent>

				<actipro:Ribbon x:Name="previewCommandRibbonMvvm"
					Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
					/>

			</sampleBrowser:ControlExample.MvvmContent>

			<sampleBrowser:ControlExample.Options>

				<StackPanel Spacing="10" DataContext="{Binding #sampleRootControl.PreviewCommandOptions}">
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Selected color" />
						<Border HorizontalAlignment="Stretch" Height="32"
							BorderBrush="{actipro:ThemeResource Container3BorderBrush}"
							BorderThickness="1"
							CornerRadius="{actipro:ThemeResource EditCornerRadius}">
							<Border.Background>
								<SolidColorBrush Color="{Binding SelectedColor}" />
							</Border.Background>
						</Border>
					</StackPanel>
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Preview color" />
						<Border HorizontalAlignment="Stretch" Height="32"
							BorderBrush="{actipro:ThemeResource Container3BorderBrush}"
							BorderThickness="1"
							CornerRadius="{actipro:ThemeResource EditCornerRadius}">
							<Border.Background>
								<SolidColorBrush Color="{Binding LivePreviewColor}" />
							</Border.Background>
						</Border>
					</StackPanel>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample Kind="Xaml" xml:space="preserve">
					<![CDATA[
<actipro:Ribbon ... >

	<actipro:RibbonTabItem Key="SampleTab">
		<actipro:RibbonGroup Key="SampleGroup" ... >
			<actipro:RibbonControlGroup ... >
			
				<actipro:BarPopupButton Key="ColorPicker" ... >

					<actipro:BarMenuGallery Key="ColorPickerGallery" ...
						Command="{Binding #sampleRootControl.SetColorCommand}"
						ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}">

						<actipro:BarMenuGallery.ItemTemplateSelector>
							<actipro:BarGalleryItemTemplateSelector />
						</actipro:BarMenuGallery.ItemTemplateSelector>

					</actipro:BarMenuGallery>

				</actipro:BarPopupButton>
				
			</actipro:RibbonControlGroup>
		</actipro:RibbonGroup>
	</actipro:RibbonTabItem>

	...

</actipro:Ribbon>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Xaml" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;

public partial class SampleRootControl : UserControl {

	private ICommand? _setColorCommand;

	/// <summary>
	/// The command to be executed when setting a color.
	/// </summary>
	public ICommand SetColorCommand {
		get {
			// Use PreviewableDelegateCommand to support being notified of when the
			// user moves the pointer over a gallery item (or gives it keyboard focus)
			// to preview the effect; otherwise any ICommand can be used if preview is not desired
			return _setColorCommand ??= new PreviewableDelegateCommand<ColorBarGalleryItemViewModel>(

				executeAction: param => {
					if (param is not null) {
						// Apply the selected color
						SelectedColor = param.Value;
					}
				},

				canExecuteFunc: _ => true,

				previewAction: param => {
					if (param is not null) {
						// Show a preview of the current color
						LivePreviewColor = param.Value;
					}
				},

				cancelPreviewAction: _ => {
					// Clear the preview color
					LivePreviewColor = Colors.Transparent;
				}
			);
		}
	}

	/// <summary>
	/// The selected color.
	/// </summary>
	public Color SelectedColor { get; set; }

	/// <summary>
	/// The live preview color.
	/// </summary>
	public Color LivePreviewColor { get; set; }

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" xml:space="preserve">
					<![CDATA[
<!-- DataContext is bound to an instance of RibbonViewModel -->
<actipro:Ribbon
	DataContext="{Binding #sampleRootControl.PreviewCommandRibbonViewModel}"
	Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
	/>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;

public partial class SampleRootControl : UserControl {

	private ICommand? _setColorCommand;

	/// <summary>
	/// Creates the ribbon view model.
	/// </summary>
	private static void CreatePreviewCommandRibbonViewModel() {
		return new RibbonViewModel() {
			Tabs = {
				new RibbonTabViewModel("SampleTab") {
					Groups = {
						new RibbonGroupViewModel("SampleGroup") {
							Items = {
								new BarPopupButtonViewModel("ColorPicker") {
									...
									MenuItems = {

										new BarGalleryViewModel("ColorPickerGallery") {
											...
											ItemTemplateSelector = new BarGalleryItemTemplateSelector(),
											Command = this.SetColorCommand,
										}

									}
								},
							},
						},
					}
				},
			}
			...
		};
	}

	/// <summary>
	/// Gets the view model to be bound to the ribbon.
	/// </summary>
	public RibbonViewModel PreviewCommandRibbonViewModel { get; } = CreatePreviewCommandRibbonViewModel();

	/// <summary>
	/// The command to be executed when setting a color.
	/// </summary>
	public ICommand SetColorCommand {
		get {
			// Use PreviewableDelegateCommand to support being notified of when the
			// user moves the pointer over a gallery item (or gives it keyboard focus)
			// to preview the effect; otherwise any ICommand can be used if preview is not desired
			return _setColorCommand ??= new PreviewableDelegateCommand<ColorBarGalleryItemViewModel>(

				executeAction: param => {
					if (param is not null) {
						// Apply the selected color
						SelectedColor = param.Value;
					}
				},

				canExecuteFunc: _ => true,

				previewAction: param => {
					if (param is not null) {
						// Show a preview of the current color
						LivePreviewColor = param.Value;
					}
				},

				cancelPreviewAction: _ => {
					// Clear the preview color
					LivePreviewColor = Colors.Transparent;
				}
			);
		}
	}

	/// <summary>
	/// The selected color.
	/// </summary>
	public Color SelectedColor { get; set; }

	/// <summary>
	/// The live preview color.
	/// </summary>
	public Color LivePreviewColor { get; set; }

}
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Combine with standard menu items"
			Footer="Add menu items before or after the gallery of colors with optional separators around the gallery."
			>

			<sampleBrowser:ControlExample.XamlContent>

				<!-- XAML-based sample -->
				<actipro:Ribbon
					IsApplicationButtonVisible="False"
					IsCollapsible="False"
					IsMinimizable="False"
					LayoutMode="Simplified"
					QuickAccessToolBarMode="None">

					<actipro:RibbonTabItem Key="SampleTab">

						<actipro:RibbonGroup Key="SampleGroup" SmallIcon="/Images/Icons/ColorPicker16.png">

							<actipro:RibbonControlGroup>
								<actipro:BarPopupButton Key="ColorPicker"
									LargeIcon="/Images/Icons/ColorPicker32.png"
									SmallIcon="/Images/Icons/ColorPicker16.png"
									ToolBarItemVariantBehavior="All">

									<!-- Menu item (before)-->
									<actipro:BarMenuItem Key="HighContrastOnly" ToggleType="CheckBox" IsChecked="False" Label="Show high-contrast only" Command="{Binding #sampleRootControl.NotImplementedCommand}" />

									<!-- MinColumnCount/MaxColumnCount must be set to the number of colors per grouped row for proper layout -->
									<actipro:BarMenuGallery Label="ColorPickerGallery"
										AreSurroundingSeparatorsAllowed="{Binding #sampleRootControl.StandardMenuItemsOptions.AreSurroundingSeparatorsAllowed}"
										Command="{Binding #sampleRootControl.BasicSetColorCommand}"
										ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}"
										ItemSpacing="4"
										ItemsSource="{Binding #sampleRootControl.DefaultColorItemsWithAutomaticView}"
										MinColumnCount="10" MaxColumnCount="10"
										UseAccentedItemBorder="True"
										>
										<actipro:BarMenuGallery.ItemTemplateSelector>
											<actipro:BarGalleryItemTemplateSelector />
										</actipro:BarMenuGallery.ItemTemplateSelector>
									</actipro:BarMenuGallery>
									
									<!-- Menu item (after)-->
									<actipro:BarMenuItem Key="MoreColors" Label="More colors..." Command="{Binding #sampleRootControl.NotImplementedCommand}" SmallIcon="/Images/Icons/ColorPicker16.png" />

								</actipro:BarPopupButton>
							</actipro:RibbonControlGroup>
						</actipro:RibbonGroup>

					</actipro:RibbonTabItem>

				</actipro:Ribbon>

			</sampleBrowser:ControlExample.XamlContent>

			<sampleBrowser:ControlExample.MvvmContent>

				<actipro:Ribbon x:Name="standardMenuItemsRibbonMvvm"
					Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
					/>

			</sampleBrowser:ControlExample.MvvmContent>

			<sampleBrowser:ControlExample.Options>

				<StackPanel Spacing="10" DataContext="{Binding #sampleRootControl.StandardMenuItemsOptions}">
					<CheckBox Content="Allow surrounding separators" IsChecked="{Binding AreSurroundingSeparatorsAllowed}" />
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample Kind="Xaml" xml:space="preserve">
					<![CDATA[
<actipro:Ribbon ... >

	<actipro:RibbonTabItem Key="SampleTab">
		<actipro:RibbonGroup Key="SampleGroup" ... >
			<actipro:RibbonControlGroup ... >
			
				<actipro:BarPopupButton Key="ColorPicker" ... >

					<!-- Menu item (before)-->
					<actipro:BarMenuItem Key="HighContrastOnly" ToggleType="CheckBox" Label="Show high-contrast only" ... />

					<!-- Color gallery -->
					<actipro:BarMenuGallery Key="ColorPickerGallery" ...$(AreSurroundingSeparatorsAllowedAttribute)
						ItemSpacing="4"
						ItemsSource="{Binding #sampleRootControl.DefaultColorItemsWithAutomaticView}"
						MinColumnCount="10" MaxColumnCount="10"
						ItemContainerTheme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.BarGalleryItemControlTheme}}">

						<actipro:BarMenuGallery.ItemTemplateSelector>
							<actipro:BarGalleryItemTemplateSelector />
						</actipro:BarMenuGallery.ItemTemplateSelector>

					</actipro:BarMenuGallery>

					<!-- Menu item (after)-->
					<actipro:BarMenuItem Key="MoreColors" Label="More colors..." ... />

				</actipro:BarPopupButton>
				
			</actipro:RibbonControlGroup>
		</actipro:RibbonGroup>
	</actipro:RibbonTabItem>

	...

</actipro:Ribbon>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="AreSurroundingSeparatorsAllowedAttribute"
															   IsEnabled="{Binding !#sampleRootControl.StandardMenuItemsOptions.AreSurroundingSeparatorsAllowed}"
															   Value="&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AreSurroundingSeparatorsAllowed=&quot;False&quot;" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Xaml" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;
using ActiproSoftware.UI.Avalonia.Data;

public partial class SampleRootControl : UserControl {

	/// <summary>
	/// A <see cref="ColorBarGalleryItemViewModel"/> used to represent an automatic color.
	/// </summary>
	private static ColorBarGalleryItemViewModel AutomaticColorGalleryItemViewModel { get; }
		= new ColorBarGalleryItemViewModel(Colors.Black, category: null, "Automatic") {
				LayoutBehavior = BarGalleryItemLayoutBehavior.MenuItem
			};

	/// <summary>
	/// The gallery item view models for a color picker using the default collection with the additional 'Automatic' selection.
	/// </summary>
	public ICollectionView DefaultColorItemsWithAutomaticView { get; }
		// Prepend the default colors with an "Automatic" view model that is configured as BarGalleryItemLayoutBehavior.MenuItem
		= BarGalleryViewModel.CreateCollectionView(
			new[] { AutomaticColorGalleryItemViewModel }.Concat(ColorBarGalleryItemViewModel.CreateDefaultColorPickerCollection()),
			categorize: true
		);

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" xml:space="preserve">
					<![CDATA[
<!-- DataContext is bound to an instance of RibbonViewModel -->
<actipro:Ribbon
	DataContext="{Binding #sampleRootControl.StandardMenuItemsRibbonViewModel}"
	Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
	/>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;

public partial class SampleRootControl : UserControl {

	/// <summary>
	/// Creates the ribbon view model.
	/// </summary>
	private static void CreateStandardMenuItemsRibbonViewModel() {
		return new RibbonViewModel() {
			Tabs = {
				new RibbonTabViewModel("SampleTab") {
					Groups = {
						new RibbonGroupViewModel("SampleGroup") {
							Items = {
								new BarPopupButtonViewModel("ColorPicker") {
									...
									MenuItems = {

										// Menu item (before)
										new BarToggleButtonViewModel("HighContrastOnly", "Show high-contrast only" ... ),

										// Color gallery
										new BarGalleryViewModel("ColorPickerGallery") {
											...$(AreSurroundingSeparatorsAllowedSetter)
											ItemTemplateSelector = new BarGalleryItemTemplateSelector(),
											MinMenuColumnCount = 10, // Max & Min column counts must be set to the number of colors per grouped row for proper layout
											MaxMenuColumnCount = 10,
											Items = BarGalleryViewModel.CreateCollectionView(
												new[] { AutomaticColorGalleryItemViewModel }.Concat(ColorBarGalleryItemViewModel.CreateDefaultColorPickerCollection()),
												categorize: true
											),
										},

										// Menu item (after)
										new BarButtonViewModel("MoreColors", "More colors..." ...),

									}
								},
							},
						},
					}
				},
			}
			...
		};
	}

	/// <summary>
	/// A <see cref="ColorBarGalleryItemViewModel"/> used to represent an automatic color.
	/// </summary>
	private static ColorBarGalleryItemViewModel AutomaticColorGalleryItemViewModel { get; }
		= new ColorBarGalleryItemViewModel(Colors.Black, category: null, "Automatic") {
				LayoutBehavior = BarGalleryItemLayoutBehavior.MenuItem
			};

	/// <summary>
	/// Gets the view model to be bound to the ribbon.
	/// </summary>
	public RibbonViewModel StandardMenuItemsRibbonViewModel { get; }
		= CreateStandardMenuItemsRibbonViewModel();

}
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="AreSurroundingSeparatorsAllowedSetter"
															   IsEnabled="{Binding !#sampleRootControl.StandardMenuItemsOptions.AreSurroundingSeparatorsAllowed}"
															   Value="&#xD;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AreSurroundingSeparatorsAllowed = false," />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Custom theme"
			Footer="Use custom themes and item templates to alter the appearance of color swatches."
			>

			<sampleBrowser:ControlExample.XamlContent>

				<!-- XAML-based sample -->
				<actipro:Ribbon
					IsApplicationButtonVisible="False"
					IsCollapsible="False"
					IsMinimizable="False"
					LayoutMode="Simplified"
					QuickAccessToolBarMode="None">

					<actipro:RibbonTabItem Key="SampleTab">

						<actipro:RibbonGroup Key="SampleGroup" SmallIcon="/Images/Icons/ColorPicker16.png">

							<actipro:RibbonControlGroup>
								<actipro:BarPopupButton Key="ColorPicker"
									LargeIcon="/Images/Icons/ColorPicker32.png"
									SmallIcon="/Images/Icons/ColorPicker16.png"
									ToolBarItemVariantBehavior="All">

									<actipro:BarMenuGallery Label="ColorPickerGallery"
										Command="{Binding #sampleRootControl.BasicSetColorCommand}"
										ItemSpacing="4"
										MinColumnCount="7"
										UseAccentedItemBorder="True"
										ItemContainerTheme="{StaticResource BarGalleryItemCircleTheme}"
										ItemTemplate="{StaticResource CircleStyleGalleryItemItemplate}"
										>

										<actipro:ColorBarGalleryItemViewModel Value="Red" />
										<actipro:ColorBarGalleryItemViewModel Value="Orange" />
										<actipro:ColorBarGalleryItemViewModel Value="Yellow" />
										<actipro:ColorBarGalleryItemViewModel Value="Green" />
										<actipro:ColorBarGalleryItemViewModel Value="Blue" />
										<actipro:ColorBarGalleryItemViewModel Value="Purple" />
										<actipro:ColorBarGalleryItemViewModel Value="Gray" />

									</actipro:BarMenuGallery>
								</actipro:BarPopupButton>
							</actipro:RibbonControlGroup>
						</actipro:RibbonGroup>


					</actipro:RibbonTabItem>

				</actipro:Ribbon>

			</sampleBrowser:ControlExample.XamlContent>

			<sampleBrowser:ControlExample.MvvmContent>

				<actipro:Ribbon x:Name="customThemeRibbonMvvm"
					Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}"
					/>

			</sampleBrowser:ControlExample.MvvmContent>

			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample Kind="Xaml" xml:space="preserve">
					<![CDATA[
<actipro:Ribbon ... >

	<actipro:Ribbon.Resources>

		<!-- Extend a theme for BarGalleryItem that should use circles instead of rectangles -->
		<ControlTheme x:Key="BarGalleryItemCircleTheme" TargetType="{x:Type actipro:BarGalleryItem}" BasedOn="{actipro:ControlTheme BarGalleryItem}">
			<!-- Define a corner radius that matches the circle template so the accented item border will match the template. -->
			<Setter Property="CornerRadius" Value="9" />
		</ControlTheme>

		<!-- Custom DataTemplate to use circles (instead of squares) for gallery items -->
		<DataTemplate x:Key="CircleStyleGalleryItemItemplate" x:DataType="{x:Type actipro:ColorBarGalleryItemViewModel}">
			<!-- The CornerRadius defined here must match the CornerRadius defined by BarGalleryItemCircleTheme -->
			<Border Width="18" Height="18"
				BorderBrush="{actipro:ThemeResource Container3BorderBrush}"
				BorderThickness="1"
				CornerRadius="9">
				<Border.Background>
					<SolidColorBrush Color="{Binding Value}" />
				</Border.Background>
			</Border>
		</DataTemplate>

	</actipro:Ribbon.Resources>

	<actipro:RibbonTabItem Key="SampleTab">
		<actipro:RibbonGroup Key="SampleGroup" ... >
			<actipro:RibbonControlGroup ... >
			
				<actipro:BarPopupButton Key="ColorPicker" ... >

					<actipro:BarMenuGallery Key="ColorPickerGallery" ...
						ItemContainerTheme="{StaticResource BarGalleryItemCircleTheme}"
						ItemTemplate="{StaticResource CircleStyleGalleryItemItemplate}"
						MinColumnCount="7"
						>

						<actipro:ColorBarGalleryItemViewModel Value="Red" />
						<actipro:ColorBarGalleryItemViewModel Value="Orange" />
						<actipro:ColorBarGalleryItemViewModel Value="Yellow" />
						<actipro:ColorBarGalleryItemViewModel Value="Green" />
						<actipro:ColorBarGalleryItemViewModel Value="Blue" />
						<actipro:ColorBarGalleryItemViewModel Value="Purple" />
						<actipro:ColorBarGalleryItemViewModel Value="Gray" />

					</actipro:BarMenuGallery>

				</actipro:BarPopupButton>
				
			</actipro:RibbonControlGroup>
		</actipro:RibbonGroup>
	</actipro:RibbonTabItem>

	...

</actipro:Ribbon>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" xml:space="preserve">
					<![CDATA[
<!-- DataContext is bound to an instance of RibbonViewModel -->
<actipro:Ribbon x:Name="customThemeRibbonMvvm"
	DataContext="{Binding #sampleRootControl.CustomThemeRibbonViewModel}"
	Theme="{StaticResource {x:Static actipro:BarsMvvmResourceKeys.RibbonControlTheme}}">

	<actipro:Ribbon.Resources>

		<!-- Extend a theme for BarGalleryItem that should use circles instead of rectangles -->
		<ControlTheme x:Key="BarGalleryItemCircleTheme" TargetType="{x:Type actipro:BarGalleryItem}" BasedOn="{actipro:ControlTheme BarGalleryItem}">
			<!-- Define a corner radius that matches the circle template so the accented item border will match the template. -->
			<Setter Property="CornerRadius" Value="9" />
		</ControlTheme>

		<!-- Custom DataTemplate to use circles (instead of squares) for gallery items -->
		<DataTemplate x:Key="CircleStyleGalleryItemItemplate" x:DataType="{x:Type actipro:ColorBarGalleryItemViewModel}">
			<!-- The CornerRadius defined here must match the CornerRadius defined by BarGalleryItemCircleTheme -->
			<Border Width="18" Height="18"
				BorderBrush="{actipro:ThemeResource Container3BorderBrush}"
				BorderThickness="1"
				CornerRadius="9">
				<Border.Background>
					<SolidColorBrush Color="{Binding Value}" />
				</Border.Background>
			</Border>
		</DataTemplate>

	</actipro:Ribbon.Resources>
</actipro:Ribbon>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Kind="Mvvm" Language="C#" xml:space="preserve">
					<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Bars.Mvvm;

public partial class SampleRootControl : UserControl {

	/// <summary>
	/// Creates the ribbon view model.
	/// </summary>
	private static void CreateCustomThemeRibbonViewModel() {
		return new RibbonViewModel() {
			Tabs = {
				new RibbonTabViewModel("SampleTab") {
					Groups = {
						new RibbonGroupViewModel("SampleGroup") {
							Items = {
								new BarPopupButtonViewModel("ColorPicker") {
									...
									MenuItems = {

										new BarGalleryViewModel("ColorPickerGallery") {
											MinMenuColumnCount = 7,
											ItemSpacing = 4,
											ItemContainerTheme = customThemeRibbonMvvm.FindResource("BarGalleryItemCircleTheme") as ControlTheme,
											ItemTemplate = customThemeRibbonMvvm.FindResource("CircleStyleGalleryItemItemplate") as IDataTemplate,
											Items = new [] {
												new ColorBarGalleryItemViewModel(Colors.Red),
												new ColorBarGalleryItemViewModel(Colors.Orange),
												new ColorBarGalleryItemViewModel(Colors.Yellow),
												new ColorBarGalleryItemViewModel(Colors.Green),
												new ColorBarGalleryItemViewModel(Colors.Blue),
												new ColorBarGalleryItemViewModel(Colors.Purple),
												new ColorBarGalleryItemViewModel(Colors.Gray),
											}
										}

									}
								},
							},
						},
					}
				},
			}
			...
		};
	}

	/// <summary>
	/// Gets the view model to be bound to the ribbon.
	/// </summary>
	public RibbonViewModel CustomThemeRibbonViewModel { get; }
		= CreateCustomThemeRibbonViewModel();

}
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


	</sampleBrowser:ControlExampleItemsControl>


</UserControl>
