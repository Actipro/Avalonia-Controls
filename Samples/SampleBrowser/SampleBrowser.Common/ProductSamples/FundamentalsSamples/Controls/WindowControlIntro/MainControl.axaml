<UserControl 
	x:Name="root"
	xmlns="https://github.com/avaloniaui"
	x:Class="ActiproSoftware.ProductSamples.FundamentalsSamples.Controls.WindowControlIntro.MainControl"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:actipro="http://schemas.actiprosoftware.com/avaloniaui"
	xmlns:actiproPrimitives="using:ActiproSoftware.UI.Avalonia.Controls.Primitives"
	xmlns:sampleBrowser="using:ActiproSoftware.SampleBrowser"
	Design.Width="1000"
	>

	<sampleBrowser:ControlExampleItemsControl
		Header="The WindowControl is a very close drop-in replacement for a standard Window, however, since it is a Control instead, it can be used inside any other container including browser-hosted or single-page applications.">

		<sampleBrowser:ControlExampleItemsControl.Documentation>
			<sampleBrowser:ControlExampleLinkItem Title="WindowControl" Url="https://www.actiprosoftware.com/docs/controls/avalonia/docking/window-control" />
		</sampleBrowser:ControlExampleItemsControl.Documentation>

		<sampleBrowser:ControlExample
			Header="Basic usage"
			Footer="Properties have been designed to match those of the standard Window class."
			DataContext="{Binding #basicUsageWindow}"
			>

			<StackPanel Spacing="40">

				<actipro:WindowControl x:Name="basicUsageWindow" Width="400" MinHeight="30" Padding="10"
					CanClose="False"
					Title="WindowControl Sample"
					>
					<actipro:WindowControl.Icon>
						<Image Source="/Images/Icons/Actipro.ico" />
					</actipro:WindowControl.Icon>

					<!-- Window Content -->
					<Grid RowDefinitions="Auto,*">
						<TextBlock>A simple TextBox:</TextBlock>
						<TextBox Grid.Row="1" Margin="0,3,0,0" Text="This TextBox is in a WindowControl." AcceptsReturn="True" TextWrapping="Wrap" />
					</Grid>

				</actipro:WindowControl>

				<actipro:InfoBar Title="Implementation Note" Message="The titlebar caption buttons change WindowControl properties and appearance, but the developer must implement the desired functionality like hiding the window when the &quot;Close&quot; button is invoked.  See the &quot;Events&quot; example for more detail." CanClose="False" />
				
			</StackPanel>


			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Window state" />
						<ComboBox ItemsSource="{actipro:DelimitedArray Type=WindowState}" SelectedValue="{Binding WindowState}" />
					</StackPanel>
					<CheckBox IsChecked="{Binding CanResize}">Can resize</CheckBox>
					<CheckBox IsChecked="{Binding HasTitleBar}">Has titlebar</CheckBox>
					<CheckBox IsChecked="{Binding IsIconVisible}" IsThreeState="True">Is icon visible</CheckBox>
					<CheckBox IsChecked="{Binding IsMinimizeButtonAllowed}">Is minimize button allowed</CheckBox>
					<CheckBox IsChecked="{Binding IsMaximizeButtonAllowed}">Is maximize button allowed</CheckBox>
					<CheckBox IsChecked="{Binding IsRestoreButtonAllowed}">Is restore button allowed</CheckBox>
					<CheckBox IsChecked="{Binding IsCloseButtonAllowed}">Is close button allowed</CheckBox>
					<CheckBox IsChecked="{Binding IsMaximizedFrameVisible}">Is maximized frame visible</CheckBox>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:WindowControl Width="400" MinHeight="30" Padding="10"
	Title="WindowControl Sample"
	CanClose="False"$(CanResizeAttribute)
	Icon="/Images/Icons/Actipro.ico"$(IsIconVisibleAttribute)
	WindowState="$(WindowState)"$(HasTitleBarAttribute)$(IsMinimizeButtonAllowedAttribute)$(IsMaximizeButtonAllowedAttribute)$(IsRestoreButtonAllowedAttribute)$(IsCloseButtonAllowedAttribute)$(IsMaximizedFrameVisibleAttribute)>
			
	<!-- Window Content -->
	<Grid RowDefinitions="Auto,*">
		<TextBlock>A simple TextBox:</TextBlock>
		<TextBox Grid.Row="1" Margin="0,3,0,0" Text="This TextBox is in a WindowControl." AcceptsReturn="True" TextWrapping="Wrap" />
	</Grid>

</actipro:WindowControl>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="IsIconVisibleAttribute"
															   IsEnabled="{Binding IsIconVisible, Converter={x:Static ObjectConverters.IsNotNull}}"
															   Value="{Binding IsIconVisible, StringFormat='&#xD;&#x9;IsIconVisible=&quot;{0}&quot;'}" />
						<sampleBrowser:CodeExampleSubstitution Key="WindowState" Value="{Binding WindowState}" />
						<sampleBrowser:CodeExampleSubstitution Key="CanResizeAttribute"
															   IsEnabled="{Binding !CanResize}"
															   Value="&#xD;&#x9;CanResize=&quot;False&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="HasTitleBarAttribute"
															   IsEnabled="{Binding !HasTitleBar}"
															   Value="&#xD;&#x9;HasTitleBar=&quot;False&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="IsCloseButtonAllowedAttribute"
															   IsEnabled="{Binding !IsCloseButtonAllowed}"
															   Value="&#xD;&#x9;IsCloseButtonAllowed=&quot;False&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="IsMinimizeButtonAllowedAttribute"
															   IsEnabled="{Binding !IsMinimizeButtonAllowed}"
															   Value="&#xD;&#x9;IsMinimizeButtonAllowed=&quot;False&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="IsMaximizeButtonAllowedAttribute"
															   IsEnabled="{Binding !IsMaximizeButtonAllowed}"
															   Value="&#xD;&#x9;IsMaximizeButtonAllowed=&quot;False&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="IsRestoreButtonAllowedAttribute"
															   IsEnabled="{Binding !IsRestoreButtonAllowed}"
															   Value="&#xD;&#x9;IsRestoreButtonAllowed=&quot;False&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="IsMaximizedFrameVisibleAttribute"
															   IsEnabled="{Binding !IsMaximizedFrameVisible}"
															   Value="&#xD;&#x9;IsMaximizedFrameVisible=&quot;False&quot;" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Dragging and resizing"
			Footer="Place the WindowControl within a Canvas to support drag-to-move."
			DataContext="{Binding #dragWindow}"
			>

			<Border
				Background="{actipro:ThemeResource Container4BackgroundBrush}"
				BorderBrush="{actipro:ThemeResource Container3BorderBrush}"
				BorderThickness="1">
				<Canvas ClipToBounds="True" Height="250">

					<actipro:WindowControl x:Name="dragWindow" Width="400" MinHeight="30" Padding="10"
						CanClose="False"
						Title="WindowControl Sample"
						Left="50"
						Top="50"
						Canvas.Left="{Binding $self.Left, Mode=OneWay}"
						Canvas.Top="{Binding $self.Top, Mode=OneWay}"
						>
						<actipro:WindowControl.Icon>
							<Image Source="/Images/Icons/Actipro.ico" />
						</actipro:WindowControl.Icon>

						<!-- Window Content -->
						<Grid RowDefinitions="Auto,*">
							<TextBlock>A simple TextBox:</TextBlock>
							<TextBox Grid.Row="1" Margin="0,3,0,0" Text="This TextBox is in a WindowControl." AcceptsReturn="True" TextWrapping="Wrap" />
						</Grid>

					</actipro:WindowControl>
				</Canvas>
			</Border>

			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<CheckBox IsChecked="{Binding CanResize}">Can resize</CheckBox>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<Canvas ClipToBounds="True">

	<actipro:WindowControl CanClose="False"$(CanResizeAttribute) ...
		Left="$(Left)" Top="$(Top)"
		Width="$(Width)" Height="$(Height)"
		Canvas.Left="{Binding $self.Left, Mode=OneWay}"
		Canvas.Top="{Binding $self.Top, Mode=OneWay}">
			
		...

	</actipro:WindowControl>
</Canvas>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="CanResizeAttribute"
															   IsEnabled="{Binding !CanResize}"
															   Value=" CanResize=&quot;False&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="Left" Value="{Binding Left}" />
						<sampleBrowser:CodeExampleSubstitution Key="Top" Value="{Binding Top}" />
						<sampleBrowser:CodeExampleSubstitution Key="Width" Value="{Binding Width}" />
						<sampleBrowser:CodeExampleSubstitution Key="Height" Value="{Binding Height}" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Titlebar custom content"
			Footer="This sample places a &quot;modified&quot; indicator by the title along with an avatar and additional caption button on the right."
			DataContext="{Binding #customContentUsage}"
			>

			<StackPanel Spacing="40">

				<actipro:WindowControl x:Name="customContentUsage" Width="500" MinHeight="30" Padding="10"
					CanClose="False"
					Title="WindowControl Sample"
					>
					<actipro:WindowControl.Icon>
						<Image Source="/Images/Icons/Actipro.ico" />
					</actipro:WindowControl.Icon>

					<!-- Custom TitleBar Content Template for Modified Indicator -->
					<actipro:WindowControl.TitleBarTheme>
						<ControlTheme TargetType="actiproPrimitives:ChromedTitleBar" BasedOn="{actipro:ControlTheme WindowControlTitleBar}">

							<Setter Property="ContentTemplate">
								<DataTemplate>
									<StackPanel Orientation="Horizontal" Spacing="{actipro:ScaledDouble 1}">

										<!-- Title -->
										<ContentControl x:DataType="x:Object" Content="{Binding}" VerticalAlignment="Center" />
								
										<!-- Modified Indicator -->
										<actipro:Badge Kind="Dot" IsActive="{Binding #customContentUsageIsModifiedCheckBox.IsChecked}" ToolTip.Tip="Modified" />

									</StackPanel>
								</DataTemplate>
							</Setter>

							<Setter Property="RightContentTemplate">
								<DataTemplate>
									<StackPanel Orientation="Horizontal">

										<!-- Avatar -->
										<actipro:Avatar Width="20" Margin="10,0" />

										<!-- Additional Caption Button -->
										<Button Theme="{actipro:ControlTheme TitleBarButton}"
												ContentTemplate="{actipro:GlyphTemplate Help16}"
												ToolTip.Tip="Help"
												/>

									</StackPanel>
								</DataTemplate>
							</Setter>

						</ControlTheme>
					</actipro:WindowControl.TitleBarTheme>

					<!-- Window Content -->
					<Grid RowDefinitions="Auto,*">
						<TextBlock>A simple TextBox:</TextBlock>
						<TextBox Grid.Row="1" Margin="0,3,0,0" Text="This TextBox is in a WindowControl." AcceptsReturn="True" TextWrapping="Wrap" />
					</Grid>

				</actipro:WindowControl>

			</StackPanel>

			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<CheckBox x:Name="customContentUsageIsModifiedCheckBox" IsChecked="True">Is modified</CheckBox>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:WindowControl CanClose="False" ... >

	<!-- Custom TitleBar Content Template for Modified Indicator -->
	<actipro:WindowControl.TitleBarTheme>
		<ControlTheme TargetType="actiproPrimitives:ChromedTitleBar" BasedOn="{actipro:ControlTheme WindowControlTitleBar}">

			<Setter Property="ContentTemplate">
				<DataTemplate>
					<StackPanel Orientation="Horizontal" Spacing="{actipro:ScaledDouble 1}">

						<!-- Title -->
						<ContentControl Content="{Binding}" VerticalAlignment="Center" />
								
						<!-- Modified Indicator -->
						<actipro:Badge Kind="Dot" IsActive="{Binding #customContentUsageIsModifiedCheckBox.IsChecked}" ToolTip.Tip="Modified" />

					</StackPanel>
				</DataTemplate>
			</Setter>

			<Setter Property="RightContentTemplate">
				<DataTemplate>
					<StackPanel Orientation="Horizontal">

						<!-- Avatar -->
						<actipro:Avatar Width="20" Margin="10,0" />

						<!-- Additional Caption Button -->
						<Button Theme="{actipro:ControlTheme TitleBarButton}"
								ContentTemplate="{actipro:GlyphTemplate Help16}"
								ToolTip.Tip="Help"
								/>

					</StackPanel>
				</DataTemplate>
			</Setter>

		</ControlTheme>
	</actipro:WindowControl.TitleBarTheme>

	...

</actipro:WindowControl>
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Titlebar menu"
			Footer="Click the titlebar icon or right-click the titlebar to show a custom context menu generated in code behind."
			>

			<actipro:WindowControl Width="400" MinHeight="30" Padding="10"
				CanClose="False"
				Title="WindowControl Sample"
				TitleBarMenuOpening="OnWindowTitleBarMenuOpening"
				>
				<actipro:WindowControl.Icon>
					<Image Source="/Images/Icons/Actipro.ico" />
				</actipro:WindowControl.Icon>

				<Grid RowDefinitions="Auto,*">
					<TextBlock>A simple TextBox:</TextBlock>
					<TextBox Grid.Row="1" Margin="0,3,0,0" Text="This TextBox is in a WindowControl." AcceptsReturn="True" TextWrapping="Wrap" />
				</Grid>

			</actipro:WindowControl>


			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:WindowControl CanClose="False" ...
	Title="WindowControl Sample"
	Icon="/Images/Icons/Actipro.ico"
	TitleBarMenuOpening="OnWindowTitleBarMenuOpening"
	>

	...

</actipro:WindowControl>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
private void OnWindowTitleBarMenuOpening(object sender, DockingMenuEventArgs e) {
	// Initialize a default menu if a default menu is not defined
	e.Menu ??= new MenuFlyout();

	// Add a custom menu item, separated from any existing menu items
	if (e.Menu.Items.Any())
		e.Menu.Items.Add(new Separator());
	e.Menu.Items.Add(new MenuItem() { Header = "Custom Menu Item Added at " + DateTime.Now.ToShortTimeString() });
}
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Shadow and elevation"
			DataContext="{Binding #shadowUsage}"
			>

			<actipro:WindowControl x:Name="shadowUsage" Width="400" MinHeight="30" Padding="10"
				IsShadowEnabled="True"
				CanClose="False"
				Title="WindowControl Sample"
				TitleBarMenuOpening="OnWindowTitleBarMenuOpening"
				>
				<actipro:WindowControl.Icon>
					<Image Source="/Images/Icons/Actipro.ico" />
				</actipro:WindowControl.Icon>

				<Grid RowDefinitions="Auto,*">
					<TextBlock>A simple TextBox:</TextBlock>
					<TextBox Grid.Row="1" Margin="0,3,0,0" Text="This TextBox is in a WindowControl." AcceptsReturn="True" TextWrapping="Wrap" />
				</Grid>

			</actipro:WindowControl>


			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<CheckBox IsChecked="{Binding IsShadowEnabled}" Content="Enable shadow" />
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Elevation" />
						<Slider Minimum="0" Maximum="24" TickFrequency="1" IsSnapToTickEnabled="True" Value="{Binding Elevation}" />
					</StackPanel>
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Shadow opacity" />
						<Slider Minimum="0" Maximum="1.0" TickFrequency="0.1" IsSnapToTickEnabled="True" Value="{Binding ShadowOpacity}" />
					</StackPanel>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:WindowControl$(IsShadowEnabledAttribute)$(ElevationAttribute)$(ShadowOpacityAttribute) />
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="IsShadowEnabledAttribute"
															   IsEnabled="{Binding !IsShadowEnabled}"
															   Value=" IsShadowEnabled=&quot;False&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="ElevationAttribute"
															   IsEnabled="{Binding IsShadowEnabled}"
															   Value="{Binding Elevation, StringFormat=' Elevation=&quot;{0}&quot;'}"/>
						<sampleBrowser:CodeExampleSubstitution Key="ShadowOpacityAttribute"
															   IsEnabled="{Binding IsShadowEnabled}"
															   Value="{Binding ShadowOpacity, StringFormat=' ShadowOpacity=&quot;{0:0.0}&quot;'}"/>
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Closing, handling events, and state change"
			Footer="Events have been designed to match those of the standard Window class."
			DataContext="{Binding #eventsWindow}"
			>

			<StackPanel>
				
				<actipro:DockSite x:Name="dockSite" Height="400"
					MenuOpening="OnDockSiteMenuOpening">

					<actipro:SplitContainer Orientation="Vertical">

						<actipro:Workspace>

							<Border
								Background="{actipro:ThemeResource Container4BackgroundBrush}"
								BorderBrush="{actipro:ThemeResource Container3BorderBrush}"
								BorderThickness="1">
								<Canvas ClipToBounds="True">

									<actipro:WindowControl x:Name="eventsWindow" Width="400" MinHeight="30" Padding="10"
										Canvas.Left="{Binding $self.Left, Mode=OneWay}"
										Canvas.Top="{Binding $self.Top, Mode=OneWay}"
										Title="WindowControl Sample"
										Left="50" Top="50"
										Activated="OnWindowActivated"
										Closed="OnWindowClosed"
										Closing="OnWindowClosing"
										Deactivated="OnWindowDeactivated"
										DragMoved="OnWindowDragMoved"
										DragMoving="OnWindowDragMoving"
										LocationChanged="OnWindowLocationChanged"
										Opened="OnWindowOpened"
										SizeChanged="OnWindowSizeChanged"
										StateChanged="OnWindowStateChanged"
										TitleBarDoubleTapped="OnWindowTitleBarDoubleTapped"
										TitleBarMenuOpening="OnWindowTitleBarMenuOpening"
										>
										<actipro:WindowControl.Icon>
											<Image Source="/Images/Icons/Actipro.ico" />
										</actipro:WindowControl.Icon>

										<!-- Window Content -->
										<Grid RowDefinitions="Auto,*">
											<TextBlock>A simple TextBox:</TextBlock>
											<TextBox Grid.Row="1" Margin="0,3,0,0" Text="This TextBox is in a WindowControl." AcceptsReturn="True" TextWrapping="Wrap" />
										</Grid>

									</actipro:WindowControl>
								</Canvas>
							</Border>

						</actipro:Workspace>

						<actipro:ToolWindowContainer>
							<actipro:ToolWindow x:Name="outputToolWindow" Title="Output" ContainerDockedSize="200,150">
								<ListBox x:Name="eventsListBox" BorderThickness="0" />
							</actipro:ToolWindow>
						</actipro:ToolWindowContainer>

					</actipro:SplitContainer>

				</actipro:DockSite>

				<actipro:InfoBar Margin="0,20,0,0" Severity="Information" Message="The source code of this sample shows how to listen for different events to implement basic Window-like functionality." CanClose="True" />
			</StackPanel>

			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<CheckBox IsChecked="{Binding CanClose}">Can close</CheckBox>
					<Button Click="OnOpenWindowButtonClick">Open and Activate Window</Button>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<Button Click="OnOpenWindowButtonClick">Open and Activate Window</Button>

...

<actipro:WindowControl x:Name="window"$(CanCloseAttribute)
	Closed="OnWindowClosed"
	Opened="OnWindowOpened"
	StateChanged="OnWindowStateChanged"
	...
	Activated="OnWindowActivated"
	Closing="OnWindowClosing"
	Deactivated="OnWindowDeactivated"
	DragMoved="OnWindowDragMoved"
	DragMoving="OnWindowDragMoving"
	LocationChanged="OnWindowLocationChanged"
	SizeChanged="OnWindowSizeChanged"
	TitleBarDoubleTapped="OnWindowTitleBarDoubleTapped"
	TitleBarMenuOpening="OnWindowTitleBarMenuOpening"
	>

	...
	
</actipro:WindowControl>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="CanCloseAttribute"
															   IsEnabled="{Binding !CanClose}"
															   Value=" CanClose=&quot;False&quot;" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
private void OnOpenWindowButtonClick(object sender, RoutedEventArgs e) {
	// Open and activate the WindowControl when the button is clicked
	if (!window.IsVisible)
		window.Show();
	window.Activate();
}

private void OnWindowClosed(object sender, RoutedEventArgs e) {
	// Hide the window when Closed event is raised
	window.IsVisible = false;
}

private void OnWindowOpened(object sender, RoutedEventArgs e) {
	// Make sure the window is visible when "Opened"
	window.IsVisible = true;
}

private void OnWindowStateChanged(object sender, RoutedEventArgs e) {
	// Respond to changes in state
	switch (window.WindowState) {
		case WindowState.Maximized:
			// This basic sample matches the size of the visual parent,
			// but does not handle if the parent size changes
			if (window.GetVisualParent() is { } parent) {
				window.Left = 0;
				window.Top = 0;
				window.Width = parent.Bounds.Width;
				window.Height = parent.Bounds.Height;
			}
			break;
		case WindowState.Minimized:
			// This basic sample minimizes to the upper-left corner
			window.Left = 0;
			window.Top = 0;
			break;
	}
}

//
// Additional event handlers unused by this sample
//

// Optionally respond to the Activated event
private void OnWindowActivated(object sender, RoutedEventArgs e) { ... }

// Optionally respond to the Closing event and cancel if desired
private void OnWindowClosing(object sender, CancelRoutedEventArgs e) { ... }

// Optionally respond to the Deactivated event
private void OnWindowDeactivated(object sender, RoutedEventArgs e) { ... }

// Optionally respond to the DragMoved event
private void OnWindowDragMoved(object sender, RoutedEventArgs e) { ... }

// Optionally respond to the DragMoving event and cancel if desired
private void OnWindowDragMoving(object sender, CancelRoutedEventArgs e) { ... }

// Optionally respond to LocationChanged event
private void OnWindowLocationChanged(object sender, RoutedEventArgs e) { ... }

// Optionally respond to SizeChanged event
private void OnWindowSizeChanged(object sender, RoutedEventArgs e) { ... }
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Native appearance"
			Footer="Title bars use an appearance that is consistent with the native platform"
			>

			<sampleBrowser:ControlExample.Styles>
				<Style Selector="actipro|WindowControl">
					<Setter Property="Padding" Value="10" />
					<Setter Property="Width" Value="400" />
					<Setter Property="MinHeight" Value="30" />
					<Setter Property="(Canvas.Left)" Value="{Binding $self.Left, Mode=OneWay}" />
					<Setter Property="(Canvas.Top)" Value="{Binding $self.Top, Mode=OneWay}" />
					<Setter Property="ContentTemplate">
						<DataTemplate>
							<Grid RowDefinitions="Auto,*">
								<TextBlock>A simple TextBox:</TextBlock>
								<TextBox Grid.Row="1" Margin="0,3,0,0" Text="This TextBox is in a WindowControl." AcceptsReturn="True" TextWrapping="Wrap" />
							</Grid>

						</DataTemplate>
					</Setter>
					<Setter Property="IconTemplate">
						<DataTemplate>
							<Image Source="/Images/Icons/Actipro.ico" />
						</DataTemplate>
					</Setter>
				</Style>
				<Style Selector="actipro|WindowControl.macos">
					<Setter Property="Title" Value="macOS Example" />
					<Setter Property="IsIconVisible" Value="False" />
					<Setter Property="TitleBarTheme">
						<ControlTheme TargetType="actiproPrimitives:ChromedTitleBar" BasedOn="{actipro:ControlTheme WindowControlTitleBar}">
							<Setter Property="HasDefaultMenu" Value="False" />
							<Setter Property="PlatformName" Value="MACOS" />
						</ControlTheme>
					</Setter>
				</Style>
				<Style Selector="actipro|WindowControl.linux">
					<Setter Property="Title" Value="Linux Example" />
					<Setter Property="TitleBarTheme">
						<ControlTheme TargetType="actiproPrimitives:ChromedTitleBar" BasedOn="{actipro:ControlTheme WindowControlTitleBar}">
							<Setter Property="HasDefaultMenu" Value="False" />
							<Setter Property="PlatformName" Value="LINUX" />
						</ControlTheme>
					</Setter>
				</Style>
				<Style Selector="actipro|WindowControl.windows">
					<Setter Property="IsIconVisible" Value="True" />
					<Setter Property="Title" Value="Windows Example" />
					<Setter Property="TitleBarTheme">
						<ControlTheme TargetType="actiproPrimitives:ChromedTitleBar" BasedOn="{actipro:ControlTheme WindowControlTitleBar}">
							<Setter Property="HasDefaultMenu" Value="False" />
							<Setter Property="PlatformName" Value="WINDOWS" />
						</ControlTheme>
					</Setter>
				</Style>
			</sampleBrowser:ControlExample.Styles>

			<Border
				Background="{actipro:ThemeResource Container4BackgroundBrush}"
				BorderBrush="{actipro:ThemeResource Container3BorderBrush}"
				BorderThickness="1">
				<Canvas ClipToBounds="True" Height="250">
					<actipro:WindowControl Classes="macos" Left="10" Top="10" />
					<actipro:WindowControl Classes="linux" Left="60" Top="60" />
					<actipro:WindowControl Classes="windows" Left="110" Top="110" />
				</Canvas>
			</Border>

		</sampleBrowser:ControlExample>


	</sampleBrowser:ControlExampleItemsControl>

</UserControl>
