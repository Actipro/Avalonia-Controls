<UserControl 
	xmlns="https://github.com/avaloniaui"
	x:Class="ActiproSoftware.ProductSamples.DockingSamples.QuickStarts.TabbedMdiNewTabButton.MainControl"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:actipro="http://schemas.actiprosoftware.com/avaloniaui"
	xmlns:sampleBrowser="using:ActiproSoftware.SampleBrowser"
	>

	<sampleBrowser:ControlExampleItemsControl
		Header="The TabbedMdiHost can be configured to display a new tab button, typically with a plus sign as content, inline and at the end of the document tabs list.">

		<sampleBrowser:ControlExampleItemsControl.Documentation>
			<sampleBrowser:ControlExampleLinkItem Title="Tabbed MDI new tab buttons" Url="https://www.actiprosoftware.com/docs/controls/avalonia/docking/workspace-mdi-features/tabbed-mdi#new-tab-buttons" />
		</sampleBrowser:ControlExampleItemsControl.Documentation>

		<sampleBrowser:ControlExample
			Header="New tab button"
			Footer="Since the new tab button is inline with tabs, it can be scrolled with them. As such, usage of the button works best when the overflow behavior is set to Shrink or ShrinkWithMenu."
			>

			<actipro:DockSite x:Name="dockSite" Height="200"
				CanDocumentWindowsFloat="True"
				FloatingWindowIcon="/Images/Icons/Actipro.ico"
				FloatingWindowTitle="Docking/MDI Demo"
				NewWindowRequested="OnDockSiteNewWindowRequested">

				<actipro:DockSite.Switcher>
					<actipro:StandardSwitcher AreToolWindowsVisible="False" />
				</actipro:DockSite.Switcher>

				<actipro:Workspace>
					<actipro:TabbedMdiHost ContainersHaveNewTabButtons="True" TabOverflowBehavior="ShrinkWithMenu">
						
						<actipro:SplitContainer>
	
							<actipro:TabbedMdiContainer>
								<actipro:DocumentWindow Title="Document1.txt" Description="Text document" FileName="Document1.txt" Icon="/Images/Icons/TextDocument16.png">
									<TextBox BorderThickness="0" Text="The first document." TextWrapping="Wrap" />
								</actipro:DocumentWindow>
								<actipro:DocumentWindow Title="Document2.txt" Description="Text document" FileName="Document2.txt" Icon="/Images/Icons/TextDocument16.png">
									<TextBox BorderThickness="0" Text="The second document." TextWrapping="Wrap" />
								</actipro:DocumentWindow>
							</actipro:TabbedMdiContainer>
	
							<actipro:TabbedMdiContainer>
								<actipro:DocumentWindow Title="Document3.txt" Description="Text document" FileName="Document3.txt" Icon="/Images/Icons/TextDocument16.png">
									<TextBox BorderThickness="0" Text="The third document." TextWrapping="Wrap" />
								</actipro:DocumentWindow>
							</actipro:TabbedMdiContainer>

						</actipro:SplitContainer>

					</actipro:TabbedMdiHost>
				</actipro:Workspace>

			</actipro:DockSite>

			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
						<![CDATA[
<actipro:DockSite x:Name="dockSite" ... >

	<actipro:Workspace>
		<actipro:TabbedMdiHost
			ContainersHaveNewTabButtons="True"
			TabOverflowBehavior="ShrinkWithMenu">

			<actipro:SplitContainer>

				<actipro:TabbedMdiContainer>
					<actipro:DocumentWindow Title="Document1.txt" ... />
					<actipro:DocumentWindow Title="Document2.txt" ... />
				</actipro:TabbedMdiContainer>

				<actipro:TabbedMdiContainer>
					<actipro:DocumentWindow Title="Document3.txt" ... />
				</actipro:TabbedMdiContainer>

			</actipro:SplitContainer>

		</actipro:TabbedMdiHost>
	</actipro:Workspace>
	...

</actipro:DockSite>
						]]>
					</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
						<![CDATA[
using ActiproSoftware.UI.Avalonia.Controls.Docking;
...
public partial class MainControl : UserControl {

	public MainControl() {
		InitializeComponent();
		
		// Listen for when a new window is requested
		dockSite.NewWindowRequested += OnDockSiteNewWindowRequested;
	}

	/// <summary>
	/// Occurs when a new window is requested by the user.
	/// </summary>
	/// <param name="sender">The sender of the event.</param>
	/// <param name="e">The <c>RoutedEventArgs</c> that contained data related to this event.</param>
	private void OnDockSiteNewWindowRequested(object? sender, RoutedEventArgs e) {
		// Create the new document
		var documentWindow = new DocumentWindow(dockSite) {
			...
		};

		// Activate the document
		documentWindow.Activate();
	}

}
]]>
					</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


	</sampleBrowser:ControlExampleItemsControl>

</UserControl>
