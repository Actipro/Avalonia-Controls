<UserControl 
	xmlns="https://github.com/avaloniaui"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:actipro="http://schemas.actiprosoftware.com/avaloniaui"
	xmlns:sample="using:ActiproSoftware.ProductSamples.DockingSamples.QuickStarts.MvvmFeatures"
	xmlns:views="using:ActiproSoftware.ProductSamples.DockingSamples.QuickStarts.MvvmFeatures.Views"
	xmlns:viewmodels="using:ActiproSoftware.ProductSamples.DockingSamples.QuickStarts.MvvmFeatures.ViewModels"
	xmlns:sampleBrowser="using:ActiproSoftware.SampleBrowser"
	>

	<sampleBrowser:ControlExampleItemsControl
		Header="The DockSite control is designed to fully support the optional usage of MVVM patterns (i.e., data-bound items that can generate docking window container views).">

		<sampleBrowser:ControlExampleItemsControl.Documentation>
			<sampleBrowser:ControlExampleLinkItem Title="MVVM features" Url="https://www.actiprosoftware.com/docs/controls/avalonia/docking/mvvm-features" />
		</sampleBrowser:ControlExampleItemsControl.Documentation>

		<sampleBrowser:ControlExample
			Header="Document windows with implicit data templates"
			Footer="The sample uses implicit data templates to associate each view model with a view.  The &quot;Documents List&quot; tool window in this sample is statically defined in the XAML of the main view and can be used to monitor/change some of the document item view model properties."
			>

			<!-- Main view -->
			<ContentControl IsTabStop="False" Focusable="False">
				<ContentControl.ContentTemplate>
					<DataTemplate>
						<views:DocumentsSampleMainView />
					</DataTemplate>
				</ContentControl.ContentTemplate>
				<ContentControl.Content>
					<viewmodels:DocumentsSampleMainViewModel />
				</ContentControl.Content>
			</ContentControl>
			
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<!-- DocumentsSampleMainView.axaml -->
<UserControl
	...
	xmlns:actipro="http://schemas.actiprosoftware.com/avaloniaui"
	xmlns:views="using:MyApplication.SomeNamespace.Views"
	xmlns:viewmodels="using:MyApplication.SomeNamespace.ViewModels"
	x:DataType="viewmodels:DocumentsSampleMainViewModel">

	<UserControl.Resources>

		<ControlTheme x:Key="DocumentWindowTheme" x:DataType="viewmodels:DocumentItemViewModel" TargetType="actipro:DocumentWindow" BasedOn="{StaticResource {x:Type actipro:DocumentWindow}}">

			<!-- DockingWindow (BaseType) -->
			<Setter Property="Description" Value="{Binding Description, Mode=TwoWay}" />
			<Setter Property="Icon" Value="{Binding Icon, Mode=TwoWay}" />
			<Setter Property="IsFloating" Value="{Binding IsFloating, Mode=TwoWay}" />
			<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
			<Setter Property="SerializationId" Value="{Binding SerializationId, Mode=TwoWay}" />
			<Setter Property="Title" Value="{Binding Title, Mode=TwoWay}" />
			<Setter Property="WindowGroupName" Value="{Binding WindowGroupName, Mode=TwoWay}" />

			<!-- DocumentWindow -->
			<Setter Property="FileName" Value="{Binding FileName, Mode=TwoWay}" />
			<Setter Property="IsReadOnly" Value="{Binding IsReadOnly, Mode=TwoWay}" />

			<!-- IMPORTANT: These properties should be configured last so that other bindings are applied before the window opens -->
			<Setter Property="IsActive" Value="{Binding IsActive, Mode=TwoWay}" />
			<Setter Property="IsOpen" Value="{Binding IsOpen, Mode=TwoWay}" />

		</ControlTheme>

	</UserControl.Resources>

	<UserControl.DataTemplates>
		<!-- NOTE: The implicit DataTemplates defined here should normally be placed in Application.Resources so that they will be found by floating windows -->

		<DataTemplate DataType="{x:Type viewmodels:ImageDocumentItemViewModel}">
			<views:ImageDocumentItemView />
		</DataTemplate>

		<DataTemplate DataType="{x:Type viewmodels:TextDocumentItemViewModel}">
			<views:TextDocumentItemView />
		</DataTemplate>
		
	</UserControl.DataTemplates>

	<actipro:DockSite x:Name="dockSite"
		DocumentItemsSource="{Binding DocumentItems}"
		DocumentItemContainerTheme="{StaticResource DocumentWindowTheme}">

		<actipro:SplitContainer Orientation="Vertical">
		
			<actipro:Workspace>
				<actipro:TabbedMdiHost />
			</actipro:Workspace>

			<actipro:ToolWindowContainer>
				<actipro:ToolWindow Title="Documents List" Icon="/Images/Icons/DocumentOutline16.png" ContainerDockedSize="200, 200">
					<DataGrid ItemsSource="{Binding #dockSite.DocumentItemsSource}" BorderThickness="0" SelectedIndex="0">
						<DataGrid.Columns>
							<DataGridTextColumn x:DataType="viewmodels:DocumentItemViewModel" Header="Title" Binding="{Binding Title}" />
							<DataGridCheckBoxColumn x:DataType="viewmodels:DocumentItemViewModel" Header="Is Open" Binding="{Binding IsOpen}" />
							<DataGridCheckBoxColumn x:DataType="viewmodels:DocumentItemViewModel" Header="Is Selected" Binding="{Binding IsSelected}" />
							<DataGridCheckBoxColumn x:DataType="viewmodels:DocumentItemViewModel" Header="Is Active" Binding="{Binding IsActive}" />
						</DataGrid.Columns>
					</DataGrid>
				</actipro:ToolWindow>
			</actipro:ToolWindowContainer>

		</actipro:SplitContainer>
	</actipro:DockSite>
	
	...

</UserControl>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// DocumentsSampleMainViewModel.cs
public partial class DocumentsSampleMainViewModel : ObservableObjectBase {

	private int _documentIndex = 1;
	private int _profilePhotoIndex = 1;
	private readonly DeferrableObservableCollection<DocumentItemViewModel> _documentItems = [];

	private DelegateCommand<object>? _activateNextDocumentCommand;
	private DelegateCommand<object>? _closeActiveDocumentCommand;
	private DelegateCommand<object>? _createNewImageDocumentCommand;
	private DelegateCommand<object>? _createNewTextDocumentCommand;
	private DelegateCommand<object>? _selectFirstDocumentCommand;

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// OBJECT
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// Initializes a new instance of the class.
	/// </summary>
	public DocumentsSampleMainViewModel() {
		CreateNewTextDocument(activate: false);
		CreateNewTextDocument(activate: false);
		CreateNewImageDocument(activate: false);
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC PROCEDURES
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// The "Activate Next Document" command.
	/// </summary>
	public ICommand ActivateNextDocumentCommand
		=> _activateNextDocumentCommand ??= new DelegateCommand<object>(_ => {
			if (_documentItems.Any()) {
				var index = 0;
				var activeDocumentItem = _documentItems.FirstOrDefault(x => x.IsActive);
				if (activeDocumentItem is not null)
					index = _documentItems.IndexOf(activeDocumentItem) + 1;
				if (index >= _documentItems.Count)
					index = 0;

				_documentItems[index].IsActive = true;
			}
		});

	/// <summary>
	/// The "Close Active Document" command.
	/// </summary>
	public ICommand CloseActiveDocumentCommand
		=> _closeActiveDocumentCommand ??= new DelegateCommand<object>(_ => {
			var activeDocumentItem = _documentItems.FirstOrDefault(x => x.IsActive);
			if (activeDocumentItem is not null)
				_documentItems.Remove(activeDocumentItem);
		});

	/// <summary>
	/// Creates a new image document.
	/// </summary>
	/// <param name="activate">Whether to activate the document.</param>
	public void CreateNewImageDocument(bool activate) {
		var index = _documentIndex++;

		var viewModel = new ImageDocumentItemViewModel() {
			SerializationId = $"Document{index}.jpg",  // NOTE: Every docking window must have a unique SerializationId if you wish to use layout serialization
			FileName = $"Document{index}.jpg",
			ImageRelativePath = "Woman01.jpg"
		};
		viewModel.Title = viewModel.FileName;

		_documentItems.Add(viewModel);

		if (activate)
			viewModel.IsActive = true;
		else
			viewModel.IsOpen = true;
	}

	/// <summary>
	/// Creates a new text document.
	/// </summary>
	/// <param name="activate">Whether to activate the document.</param>
	public void CreateNewTextDocument(bool activate) {
		var index = _documentIndex++;
		var viewModel = new TextDocumentItemViewModel() {
			SerializationId = $"Document{index}.txt",  // NOTE: Every docking window must have a unique SerializationId if you wish to use layout serialization
			FileName = $"Document{index}.txt",
			Text = $"Text document {index} dynamically created at {DateTime.Now}."
		};
		viewModel.Title = viewModel.FileName;

		_documentItems.Add(viewModel);

		if (activate)
			viewModel.IsActive = true;
		else
			viewModel.IsOpen = true;
	}

	/// <summary>
	/// The "Create New Image Document" command.
	/// </summary>
	public ICommand CreateNewImageDocumentCommand
		=> _createNewImageDocumentCommand ??= new DelegateCommand<object>(_ => {
			CreateNewImageDocument(activate: true);
		});

	/// <summary>
	/// The "Create New Text Document" command.
	/// </summary>
	public ICommand CreateNewTextDocumentCommand
		=> _createNewTextDocumentCommand ??= new DelegateCommand<object>(_ => {
			CreateNewTextDocument(activate: true);
		});

	/// <summary>
	/// The document items associated with this view-model.
	/// </summary>
	public IList<DocumentItemViewModel> DocumentItems
		=> _documentItems;

	/// <summary>
	/// The "Select First Document" command.
	/// </summary>
	public ICommand SelectFirstDocumentCommand
		=> _selectFirstDocumentCommand ??= new DelegateCommand<object>(_ => {
			var documentItem = _documentItems.FirstOrDefault();
			if (documentItem is not null)
				documentItem.IsSelected = true;
		});

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<!-- ImageDocumentItemView.axaml -->
<UserControl
	...
	xmlns:viewmodels="using:MyApplication.SomeNamespace.ViewModels"
	x:DataType="viewmodels:ImageDocumentItemViewModel">

	<Image Source="{Binding Image}" Stretch="None" />

</UserControl>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<!-- TextDocumentItemView.axaml -->
<UserControl
	...
	xmlns:viewmodels="using:MyApplication.SomeNamespace.ViewModels"
	x:DataType="viewmodels:TextDocumentItemViewModel">

	<TextBox Text="{Binding Text, Mode=TwoWay}" BorderThickness="0" TextWrapping="Wrap" />

</UserControl>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// DockingItemViewModelBase.cs
public abstract class DockingItemViewModelBase : ObservableObjectBase {

	private string? _description;
	private IImage? _icon;
	private bool _isActive;
	private bool _isFloating;
	private bool _isOpen;
	private bool _isSelected;
	private string? _serializationId;
	private string? _title;
	private string? _windowGroupName;

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC PROCEDURES
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// The description associated with the view-model.
	/// </summary>
	public string? Description {
		get => _description;
		set => SetProperty(ref _description, value);
	}

	/// <summary>
	/// The icon associated with the view-model.
	/// </summary>
	public IImage? Icon {
		get => _icon;
		set => SetProperty(ref _icon, value);
	}

	/// <summary>
	/// Whether the view is currently active.
	/// </summary>
	/// <value>
	/// <c>true</c> if the view is currently active; otherwise, <c>false</c>.
	/// </value>
	public bool IsActive {
		get => _isActive;
		set => SetProperty(ref _isActive, value);
	}

	/// <summary>
	/// Whether the view is floating.
	/// </summary>
	/// <value>
	/// <c>true</c> if the view is floating; otherwise, <c>false</c>.
	/// </value>
	public bool IsFloating {
		get => _isFloating;
		set => SetProperty(ref _isFloating, value);
	}

	/// <summary>
	/// Whether the view is currently open.
	/// </summary>
	/// <value>
	/// <c>true</c> if the view is currently open; otherwise, <c>false</c>.
	/// </value>
	public bool IsOpen {
		get => _isOpen;
		set => SetProperty(ref _isOpen, value);
	}

	/// <summary>
	/// Whether the view is currently selected in its parent container.
	/// </summary>
	/// <value>
	/// <c>true</c> if the view is currently selected in its parent container; otherwise, <c>false</c>.
	/// </value>
	public bool IsSelected {
		get => _isSelected;
		set => SetProperty(ref _isSelected, value);
	}

	/// <summary>
	/// Indicates whether the container generated for this view model should be a tool window.
	/// </summary>
	/// <value>
	/// <c>true</c> if the container generated for this view model should be a tool window; otherwise, <c>false</c>.
	/// </value>
	public abstract bool IsTool { get; }

	/// <summary>
	/// The name that uniquely identifies the view-model for layout serialization.
	/// </summary>
	public string? SerializationId {
		get => _serializationId;
		set => SetProperty(ref _serializationId, value);
	}

	/// <summary>
	/// The title associated with the view-model.
	/// </summary>
	public string? Title {
		get => _title;
		set => SetProperty(ref _title, value);
	}

	/// <summary>
	/// The window group name associated with the view-model.
	/// </summary>
	public string? WindowGroupName {
		get => _windowGroupName;
		set => SetProperty(ref _windowGroupName, value);
	}

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// DocumentItemViewModel.cs
public class DocumentItemViewModel : DockingItemViewModelBase {

	private string? _fileName;
	private bool _isReadOnly;

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC PROCEDURES
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// The file name associated with the view-model.
	/// </summary>
	public string? FileName {
		get => _fileName;
		set => SetProperty(ref _fileName, value);
	}

	/// <summary>
	/// The read-only state of the associated with the view-model.
	/// </summary>
	public bool IsReadOnly {
		get => _isReadOnly;
		set => SetProperty(ref _isReadOnly, value);
	}

	/// <inheritdoc/>
	public override bool IsTool
		=> false;

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// ImageDocumentItemViewModel.cs
public class ImageDocumentItemViewModel : DocumentItemViewModel {

	private IImage? _image;
	private string? _imageRelativePath;

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// OBJECT
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// Initializes a new instance of the class.
	/// </summary>
	public ImageDocumentItemViewModel() {
		Description = "Image document";
		Icon = ImageLoader.GetIcon("Picture16.png");
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// NON-PUBLIC PROCEDURES
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	private void InvalidateImage() {
		_image = null;
		OnPropertyChanged(nameof(Image));
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC PROCEDURES
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	public IImage? Image
		=> _image ??= (ImageRelativePath is { } relPath)
			? ImageLoader.GetProfilePhoto(relPath)
			: null;

	/// <summary>
	/// The relative path of the image associated with the view-model.
	/// </summary>
	public string? ImageRelativePath {
		get => _imageRelativePath;
		set {
			if (SetProperty(ref _imageRelativePath, value)) {
				// Property changed, so invalidate any image generated from the old path
				InvalidateImage();
			}
		}
	}

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// TextDocumentItemViewModel.cs
public class TextDocumentItemViewModel : DocumentItemViewModel {

	private string? _text;

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// OBJECT
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// Initializes a new instance of the class.
	/// </summary>
	public TextDocumentItemViewModel() {
		Description = "Text document";
		Icon = ImageLoader.GetIcon("TextDocument16.png");
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC PROCEDURES
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// The text associated with the view-model.
	/// </summary>
	public string? Text {
		get => _text;
		set => SetProperty(ref _text, value);
	}

}
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Tool windows with data template selector"
			Footer="The sample uses a data template selector to associate each view model with a view.  The &quot;Tools List&quot; document window in this sample is statically defined in the XAML of the main view and can be used to monitor/change some of the tool item view model properties."
			>

			<!-- Main view -->
			<ContentControl IsTabStop="False" Focusable="False">
				<ContentControl.ContentTemplate>
					<DataTemplate>
						<views:ToolsSampleMainView />
					</DataTemplate>
				</ContentControl.ContentTemplate>
				<ContentControl.Content>
					<viewmodels:ToolsSampleMainViewModel />
				</ContentControl.Content>
			</ContentControl>

			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<!-- ToolsSampleMainView.axaml -->
<UserControl
	...
	xmlns:actipro="http://schemas.actiprosoftware.com/avaloniaui"
	xmlns:views="using:MyApplication.SomeNamespace.Views"
	xmlns:viewmodels="using:MyApplication.SomeNamespace.ViewModels"
	x:DataType="viewmodels:ToolsSampleMainViewModel">

	<UserControl.Resources>

		<!-- NOTE: Use a ControlTheme to bind DockingWindow properties to view models -->
		<ControlTheme x:Key="ToolWindowTheme" x:DataType="viewmodels:ToolItemViewModel" TargetType="actipro:ToolWindow" BasedOn="{StaticResource {x:Type actipro:ToolWindow}}">

			<!-- DockingWindow (BaseType) -->
			<Setter Property="Description" Value="{Binding Description, Mode=TwoWay}" />
			<Setter Property="Icon" Value="{Binding Icon, Mode=TwoWay}" />
			<Setter Property="IsFloating" Value="{Binding IsFloating, Mode=TwoWay}" />
			<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
			<Setter Property="SerializationId" Value="{Binding SerializationId, Mode=TwoWay}" />
			<Setter Property="Title" Value="{Binding Title, Mode=TwoWay}" />
			<Setter Property="WindowGroupName" Value="{Binding WindowGroupName, Mode=TwoWay}" />

			<!-- ToolWindow -->
			<Setter Property="DefaultDockSide" Value="{Binding DefaultDockSide, Mode=TwoWay}" />
			<Setter Property="State" Value="{Binding State, Mode=TwoWay}" />

			<!-- IMPORTANT: These properties should be configured last so that other bindings are applied before the window opens -->
			<Setter Property="IsActive" Value="{Binding IsActive, Mode=TwoWay}" />
			<Setter Property="IsOpen" Value="{Binding IsOpen, Mode=TwoWay}" />

		</ControlTheme>

		<!-- NOTE: Use a DataTemplateSelector to associate each ViewModel with a View -->
		<actipro:TypedDataTemplateSelector x:Key="ToolItemTemplateSelector">
			<DataTemplate x:DataType="viewmodels:ToolItem1ViewModel">
				<views:ToolItem1View />
			</DataTemplate>
			<DataTemplate x:DataType="viewmodels:ToolItem2ViewModel">
				<views:ToolItem2View />
			</DataTemplate>
			<DataTemplate x:DataType="viewmodels:ToolItem3ViewModel">
				<views:ToolItem3View />
			</DataTemplate>
		</actipro:TypedDataTemplateSelector>
		
	</UserControl.Resources>

	<actipro:DockSite x:Name="dockSite"
		ToolItemContainerTheme="{StaticResource ToolWindowTheme}"
		ToolItemTemplate="{StaticResource ToolItemTemplateSelector}"
		ToolItemsSource="{Binding ToolItems}">

		<actipro:Workspace>
			<actipro:TabbedMdiHost>
				<actipro:TabbedMdiContainer>
					<actipro:DocumentWindow Title="Tools List" Icon="/Images/Icons/DocumentOutline16.png">
						<DataGrid ItemsSource="{Binding #dockSite.ToolItemsSource}" BorderThickness="0" SelectedIndex="0">
							<DataGrid.Columns>
								<DataGridTextColumn x:DataType="viewmodels:ToolItemViewModel" Header="Title" Binding="{Binding Title}" />
								<DataGridCheckBoxColumn x:DataType="viewmodels:ToolItemViewModel" Header="Is Open" Binding="{Binding IsOpen}" />
								<DataGridCheckBoxColumn x:DataType="viewmodels:ToolItemViewModel" Header="Is Selected" Binding="{Binding IsSelected}" />
								<DataGridCheckBoxColumn x:DataType="viewmodels:ToolItemViewModel" Header="Is Active" Binding="{Binding IsActive}" />
								<DataGridCheckBoxColumn x:DataType="viewmodels:ToolItemViewModel" Header="Is Floating" Binding="{Binding IsFloating}" />
							</DataGrid.Columns>
						</DataGrid>
					</actipro:DocumentWindow>
				</actipro:TabbedMdiContainer>
			</actipro:TabbedMdiHost>
		</actipro:Workspace>

	</actipro:DockSite>
	
	...

</UserControl>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// ToolsSampleMainViewModel.cs
public partial class ToolsSampleMainViewModel : ObservableObjectBase {

	private readonly DeferrableObservableCollection<ToolItemViewModel> _toolItems = [];

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// OBJECT
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// Initializes a new instance of the class.
	/// </summary>
	public ToolsSampleMainViewModel() {
		_toolItems.Add(new ToolItem1ViewModel());
		_toolItems.Add(new ToolItem2ViewModel() { State = ToolItemState.Document });
		_toolItems.Add(new ToolItem3ViewModel() { State = ToolItemState.AutoHide, DefaultDockSide = Dock.Left });

		foreach (var toolItem in _toolItems)
			toolItem.IsOpen = true;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC PROCEDURES
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// The tool items associated with this view-model.
	/// </summary>
	public IList<ToolItemViewModel> ToolItems
		=> _toolItems;

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<!-- ToolItem1View.axaml -->
<UserControl
	...
	xmlns:viewmodels="using:MyApplication.SomeNamespace.ViewModels"
	x:DataType="viewmodels:ToolItem1ViewModel"

	<TextBox Text="This is the view for tool item 1, which starts off docked." BorderThickness="0" TextWrapping="Wrap" />

</UserControl>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<!-- ToolItem2View.axaml -->
<UserControl
	...
	xmlns:viewmodels="using:MyApplication.SomeNamespace.ViewModels"
	x:DataType="viewmodels:ToolItem2ViewModel"

	<TextBox Text="This is the view for tool item 2, which starts off in MDI." BorderThickness="0" TextWrapping="Wrap" />

</UserControl>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<!-- ToolItem3View.axaml -->
<UserControl
	...
	xmlns:viewmodels="using:MyApplication.SomeNamespace.ViewModels"
	x:DataType="viewmodels:ToolItem3ViewModel"

	<TextBox Text="This is the view for tool item 3, which starts off auto-hidden." BorderThickness="0" TextWrapping="Wrap" />

</UserControl>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// DockingItemViewModelBase.cs
public abstract class DockingItemViewModelBase : ObservableObjectBase {

	private string? _description;
	private IImage? _icon;
	private bool _isActive;
	private bool _isFloating;
	private bool _isOpen;
	private bool _isSelected;
	private string? _serializationId;
	private string? _title;
	private string? _windowGroupName;

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC PROCEDURES
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// The description associated with the view-model.
	/// </summary>
	public string? Description {
		get => _description;
		set => SetProperty(ref _description, value);
	}

	/// <summary>
	/// The icon associated with the view-model.
	/// </summary>
	public IImage? Icon {
		get => _icon;
		set => SetProperty(ref _icon, value);
	}

	/// <summary>
	/// Whether the view is currently active.
	/// </summary>
	/// <value>
	/// <c>true</c> if the view is currently active; otherwise, <c>false</c>.
	/// </value>
	public bool IsActive {
		get => _isActive;
		set => SetProperty(ref _isActive, value);
	}

	/// <summary>
	/// Whether the view is floating.
	/// </summary>
	/// <value>
	/// <c>true</c> if the view is floating; otherwise, <c>false</c>.
	/// </value>
	public bool IsFloating {
		get => _isFloating;
		set => SetProperty(ref _isFloating, value);
	}

	/// <summary>
	/// Whether the view is currently open.
	/// </summary>
	/// <value>
	/// <c>true</c> if the view is currently open; otherwise, <c>false</c>.
	/// </value>
	public bool IsOpen {
		get => _isOpen;
		set => SetProperty(ref _isOpen, value);
	}

	/// <summary>
	/// Whether the view is currently selected in its parent container.
	/// </summary>
	/// <value>
	/// <c>true</c> if the view is currently selected in its parent container; otherwise, <c>false</c>.
	/// </value>
	public bool IsSelected {
		get => _isSelected;
		set => SetProperty(ref _isSelected, value);
	}

	/// <summary>
	/// Indicates whether the container generated for this view model should be a tool window.
	/// </summary>
	/// <value>
	/// <c>true</c> if the container generated for this view model should be a tool window; otherwise, <c>false</c>.
	/// </value>
	public abstract bool IsTool { get; }

	/// <summary>
	/// The name that uniquely identifies the view-model for layout serialization.
	/// </summary>
	public string? SerializationId {
		get => _serializationId;
		set => SetProperty(ref _serializationId, value);
	}

	/// <summary>
	/// The title associated with the view-model.
	/// </summary>
	public string? Title {
		get => _title;
		set => SetProperty(ref _title, value);
	}

	/// <summary>
	/// The window group name associated with the view-model.
	/// </summary>
	public string? WindowGroupName {
		get => _windowGroupName;
		set => SetProperty(ref _windowGroupName, value);
	}

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// ToolItemViewModel.cs
public class ToolItemViewModel : DockingItemViewModelBase {

	private Dock _defaultDockSide = Dock.Right;
	private DockingWindowState _state = DockingWindowState.Docked;

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// PUBLIC PROCEDURES
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	/// <summary>
	/// The default side that the tool window will dock towards when no prior location is known.
	/// </summary>
	public Dock DefaultDockSide {
		get => _defaultDockSide;
		set => SetProperty(ref _defaultDockSide, value);
	}

	/// <inheritdoc/>
	public override bool IsTool
		=> true;

	/// <summary>
	/// The current state of the view.
	/// </summary>
	public DockingWindowState State {
		get => _state;
		set => SetProperty(ref _state, value);
	}

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// ToolItem1ViewModel.cs
public class ToolItem1ViewModel : ToolItemViewModel {

	/// <summary>
	/// Initializes a new instance of the class.
	/// </summary>
	public ToolItem1ViewModel() {
		SerializationId = "Tool1";  // NOTE: Every docking window must have a unique SerializationId if you wish to use layout serialization
		Title = "Tool 1";
	}

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// ToolItem2ViewModel.cs
public class ToolItem2ViewModel : ToolItemViewModel {

	/// <summary>
	/// Initializes a new instance of the class.
	/// </summary>
	public ToolItem1ViewModel() {
		SerializationId = "Tool2";  // NOTE: Every docking window must have a unique SerializationId if you wish to use layout serialization
		Title = "Tool 2";
	}

}
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// ToolItem3ViewModel.cs
public class ToolItem3ViewModel : ToolItemViewModel {

	/// <summary>
	/// Initializes a new instance of the class.
	/// </summary>
	public ToolItem3ViewModel() {
		SerializationId = "Tool3";  // NOTE: Every docking window must have a unique SerializationId if you wish to use layout serialization
		Title = "Tool 3";
	}

}
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>

	</sampleBrowser:ControlExampleItemsControl>

</UserControl>
