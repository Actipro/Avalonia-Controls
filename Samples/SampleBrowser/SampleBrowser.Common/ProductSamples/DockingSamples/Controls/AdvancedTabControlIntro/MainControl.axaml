<UserControl 
	x:Name="root"
	xmlns="https://github.com/avaloniaui"
	x:Class="ActiproSoftware.ProductSamples.DockingSamples.Controls.AdvancedTabControlIntro.MainControl"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:actipro="http://schemas.actiprosoftware.com/avaloniaui"
	xmlns:sampleBrowser="using:ActiproSoftware.SampleBrowser"
	>
	<UserControl.Resources>

		<actipro:ComparisonConverter x:Key="EqualToComparisonConverter" Operator="EqualTo" />
		<actipro:ComparisonConverter x:Key="NotEqualToComparisonConverter" Operator="NotEqualTo" />

	</UserControl.Resources>

	<sampleBrowser:ControlExampleItemsControl
		Header="Docking &amp; MDI includes a very full-featured tab control that extends native TabControl, is extremely customizable, and can be used independently of docking windows in your apps.">

		<sampleBrowser:ControlExampleItemsControl.Documentation>
			<sampleBrowser:ControlExampleLinkItem Title="AdvancedTabControl" Url="https://www.actiprosoftware.com/docs/controls/avalonia/docking/advanced-tab-control" />
		</sampleBrowser:ControlExampleItemsControl.Documentation>

		<sampleBrowser:ControlExample
			Header="Basic usage"
			DataContext="{Binding #basicUsage}"
			>
			
			<actipro:AdvancedTabControl x:Name="basicUsage"
				HasTabIcons="True"
				CanTabsDrag="True">
				<actipro:AdvancedTabControl.ItemContainerTheme>
					<ControlTheme TargetType="actipro:AdvancedTabItem" BasedOn="{StaticResource {x:Type actipro:AdvancedTabItem}}">
						<Setter Property="Icon" Value="/Images/Icons/RichTextDocument16.png" />
						<Setter Property="CanClose" Value="True" />
						<Setter Property="CanPin" Value="True" />
						<Setter Property="CanPromote" Value="True" />
					</ControlTheme>
				</actipro:AdvancedTabControl.ItemContainerTheme>
				
				<actipro:AdvancedTabItem Header="Document1.txt">
					<TextBox Text="Content 1" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document2.txt">
					<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document3.txt">
					<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document4.txt">
					<TextBox Text="Content 4" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
			</actipro:AdvancedTabControl>

			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Tab strip placement" />
						<ComboBox ItemsSource="{actipro:DelimitedArray Type=Dock}" SelectedValue="{Binding TabStripPlacement}" />
					</StackPanel>
					<CheckBox IsChecked="{Binding HasTabIcons}">Has tab icons</CheckBox>
					<CheckBox IsChecked="{Binding HasTabCloseButtons}">Has tab close buttons</CheckBox>
					<CheckBox IsChecked="{Binding CanTabsDrag}">Can tabs drag</CheckBox>
					<CheckBox IsChecked="{Binding IsTabContentHorizontal}">Is tab content horizontal</CheckBox>
					<CheckBox IsChecked="{Binding IsAnimationEnabled}">Is animation enabled</CheckBox>
					<CheckBox IsChecked="{Binding IsEnabled}">Is enabled</CheckBox>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:AdvancedTabControl$(IsAnimationEnabledAttribute)
	CanTabsDrag="$(CanTabsDrag)"
	HasTabIcons="$(HasTabIcons)"
	HasTabCloseButtons="$(HasTabCloseButtons)"
	IsTabContentHorizontal="$(IsTabContentHorizontal)"
	TabStripPlacement="$(TabStripPlacement)"
	>
	
	<actipro:AdvancedTabItem Header="Document1.txt"$(TabItemCanCloseAttribute)$(TabItemIconAttribute)>
		<!-- Tab Content -->
	</actipro:AdvancedTabItem>
	
	<actipro:AdvancedTabItem Header="Document2.txt" ... />
	<actipro:AdvancedTabItem Header="Document3.txt" ... />
	
</actipro:AdvancedTabControl>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="TabStripPlacement" Value="{Binding TabStripPlacement}" />
						<sampleBrowser:CodeExampleSubstitution Key="HasTabIcons" Value="{Binding HasTabIcons}" />
						<sampleBrowser:CodeExampleSubstitution Key="HasTabCloseButtons" Value="{Binding HasTabCloseButtons}" />
						<sampleBrowser:CodeExampleSubstitution Key="CanTabsDrag" Value="{Binding CanTabsDrag}" />
						<sampleBrowser:CodeExampleSubstitution Key="IsTabContentHorizontal" Value="{Binding IsTabContentHorizontal}" />
						<sampleBrowser:CodeExampleSubstitution Key="IsAnimationEnabledAttribute"
															   IsEnabled="{Binding !IsAnimationEnabled}"
															   Value=" IsAnimationEnabled=&quot;False&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="TabItemCanCloseAttribute"
															   IsEnabled="{Binding HasTabCloseButtons}"
															   Value=" CanClose=&quot;True&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="TabItemIconAttribute"
															   IsEnabled="{Binding HasTabIcons}"
															   Value=" Icon=&quot;/Images/Icons/RichTextDocument16.png&quot;" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Overflow"
			Footer="Multiple options are available to access tabs when there are too many tabs to display."
			DataContext="{Binding #overflowUsage}"
			>

			<actipro:AdvancedTabControl x:Name="overflowUsage" TabOverflowBehavior="ScrollWithMenu">
				<actipro:AdvancedTabItem Header="Document1.txt">
					<TextBox Text="Content 1" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document2.txt">
					<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document3.txt">
					<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document4.txt">
					<TextBox Text="Content 4" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document5.txt">
					<TextBox Text="Content 5" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document6.txt">
					<TextBox Text="Content 6" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document7.txt">
					<TextBox Text="Content 7" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document8.txt">
					<TextBox Text="Content 8" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document9.txt">
					<TextBox Text="Content 9" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
			</actipro:AdvancedTabControl>

			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Tab strip placement" />
						<ComboBox ItemsSource="{actipro:DelimitedArray Type=Dock}" SelectedValue="{Binding TabStripPlacement}" />
					</StackPanel>
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Overflow behavior" />
						<ComboBox ItemsSource="{actipro:DelimitedArray Type=actipro:TabOverflowBehavior}" SelectedValue="{Binding TabOverflowBehavior}" />
					</StackPanel>
					<CheckBox IsEnabled="False" IsChecked="{Binding IsOverflowed}">Is overflowed</CheckBox>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:AdvancedTabControl TabOverflowBehavior="$(TabOverflowBehavior)" TabStripPlacement="$(TabStripPlacement)">

	...

</actipro:AdvancedTabControl>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="TabOverflowBehavior" Value="{Binding TabOverflowBehavior}" />
						<sampleBrowser:CodeExampleSubstitution Key="TabStripPlacement" Value="{Binding TabStripPlacement}" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Closing tabs"
			Footer="Optionally support closable tabs including smooth animations when the tab is removed."
			DataContext="{Binding #closeUsage}"
			>

			<StackPanel>
				<actipro:AdvancedTabControl x:Name="closeUsage" HasTabCloseButtons="True">
					<actipro:AdvancedTabItem Header="Pinned Tab" CanClose="True" LayoutKind="Pinned">
						<StackPanel Margin="20" Spacing="10">
							<TextBlock Classes="theme-form-control-label">Options for this tab only:</TextBlock>
							<CheckBox IsChecked="{Binding $parent[actipro:AdvancedTabItem].CanClose}">Can close</CheckBox>
							<CheckBox IsChecked="{Binding $parent[actipro:AdvancedTabItem].IsEnabled}">Is enabled</CheckBox>
						</StackPanel>
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Tab 1" CanClose="True">
						<StackPanel Margin="20" Spacing="10">
							<TextBlock Classes="theme-form-control-label">Options for this tab only:</TextBlock>
							<CheckBox IsChecked="{Binding $parent[actipro:AdvancedTabItem].CanClose}">Can close</CheckBox>
							<CheckBox IsChecked="{Binding $parent[actipro:AdvancedTabItem].IsEnabled}">Is enabled</CheckBox>
						</StackPanel>
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Tab 2" CanClose="True">
						<StackPanel Margin="20" Spacing="10">
							<TextBlock Classes="theme-form-control-label">Options for this tab only:</TextBlock>
							<CheckBox IsChecked="{Binding $parent[actipro:AdvancedTabItem].CanClose}">Can close</CheckBox>
							<CheckBox IsChecked="{Binding $parent[actipro:AdvancedTabItem].IsEnabled}">Is enabled</CheckBox>
						</StackPanel>
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Preview Tab" CanClose="True" LayoutKind="Preview">
						<StackPanel Margin="20" Spacing="10">
							<TextBlock Classes="theme-form-control-label">Options for this tab only:</TextBlock>
							<CheckBox IsChecked="{Binding $parent[actipro:AdvancedTabItem].CanClose}">Can close</CheckBox>
							<CheckBox IsChecked="{Binding $parent[actipro:AdvancedTabItem].IsEnabled}">Is enabled</CheckBox>
						</StackPanel>
					</actipro:AdvancedTabItem>
				</actipro:AdvancedTabControl>
			</StackPanel>

			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<CheckBox IsChecked="{Binding HasTabCloseButtons}">Has tab close buttons</CheckBox>
					<CheckBox IsChecked="{Binding CanTabsCloseOnMiddleClick}">Can tabs close on middle click</CheckBox>
					<CheckBox IsChecked="{Binding IsAnimationEnabled}">Is animation enabled</CheckBox>
					<CheckBox IsChecked="{Binding IsEnabled}">Is enabled</CheckBox>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:AdvancedTabControl$(HasTabCloseButtonsAttribute)$(CanTabsCloseOnMiddleClickAttribute)$(IsAnimationEnabledAttribute)>

	<!-- Individual tabs must opt-in to support closing -->
	<actipro:AdvancedTabItem Header="Closable Tab" CanClose="True">
		...
	</actipro:AdvancedTabItem>

</actipro:AdvancedTabControl>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="HasTabCloseButtonsAttribute"
															   IsEnabled="{Binding HasTabCloseButtons}"
															   Value=" HasTabCloseButtons=&quot;True&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="CanTabsCloseOnMiddleClickAttribute"
															   IsEnabled="{Binding CanTabsCloseOnMiddleClick}"
															   Value=" CanTabsCloseOnMiddleClick=&quot;True&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="IsAnimationEnabledAttribute"
															   IsEnabled="{Binding !IsAnimationEnabled}"
															   Value=" IsAnimationEnabled=&quot;False&quot;" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Pinned and preview tabs"
			Footer="Optionally pin important tabs or open select tabs as a preview that can be promoted to a normal tab."
			DataContext="{Binding #pinnedAndPreviewUsage}"
			>

			<actipro:AdvancedTabControl x:Name="pinnedAndPreviewUsage" CanTabsPin="True" CanTabsPromote="True">
				<actipro:AdvancedTabItem Header="Pinned 1" LayoutKind="Pinned">
					<TextBox Text="This tab originally pinned." Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Pinned 2" LayoutKind="Pinned">
					<TextBox Text="This tab originally pinned." Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Normal 1">
					<TextBox Text="This tab originally normal." Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Normal 2">
					<TextBox Text="This tab originally normal." Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Preview 1" LayoutKind="Preview">
					<TextBox Text="This tab originally preview." Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Preview 2" LayoutKind="Preview">
					<TextBox Text="This tab originally preview." Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
			</actipro:AdvancedTabControl>

			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<CheckBox x:Name="canPinCheckBox" IsChecked="{Binding CanTabsPin}">Can tabs pin</CheckBox>
					<CheckBox x:Name="canPromoteCheckBox" IsChecked="{Binding CanTabsPromote}">Can tabs promote</CheckBox>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:AdvancedTabControl CanTabsPin="$(CanTabsPin)" CanTabsPromote="$(CanTabsPromote)">
	<!-- Use the LayoutKind property to set Normal, Pinned, or Preview -->
	<actipro:AdvancedTabItem Header="Normal" ... />
	<actipro:AdvancedTabItem Header="Pinned" LayoutKind="Pinned" ... />
	<actipro:AdvancedTabItem Header="Preview" LayoutKind="Preview" ... />
</actipro:AdvancedTabControl>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="CanTabsPin" Value="{Binding CanTabsPin}" />
						<sampleBrowser:CodeExampleSubstitution Key="CanTabsPromote" Value="{Binding CanTabsPromote}" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="New tab button"
			Footer="Optionally provide a button for creating new tabs, which, when clicked, raises an event for creating the new tab."
			>

			<actipro:AdvancedTabControl HasNewTabButton="True" NewTabRequested="OnNewTabRequested">
				<actipro:AdvancedTabItem Header="Document1.txt">
					<TextBox Text="Content 1" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document2.txt">
					<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Document3.txt">
					<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
			</actipro:AdvancedTabControl>

			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:AdvancedTabControl HasNewTabButton="True" NewTabRequested="OnNewTabRequested">

	<actipro:AdvancedTabItem Header="Document1.txt" ... />
	<actipro:AdvancedTabItem Header="Document2.txt" ... />
	<actipro:AdvancedTabItem Header="Document3.txt" ... />

	...

</actipro:AdvancedTabControl>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// This method is invoked to handle the NewTabRequested event
private void OnNewTabRequested(object? sender, System.EventArgs e) {
	if (sender is AdvancedTabControl tabControl) {
		// Create and add a new tab
		var documentNumber = ++_newDocumentIndex;
		var tabItem = new AdvancedTabItem() {
			Header = $"Document{documentNumber}.txt",
			Content = new TextBox() {
				Text = $"Content {documentNumber}",
				Margin = new Avalonia.Thickness(10),
				AcceptsReturn = true,
			}
		};
		tabControl.Items.Add(tabItem);

		// Select the new tab
		tabItem.IsSelected = true;
	}
}
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Menu customizations"
			Footer="Optionally customize a context menu on each tab or the overflow menu."
			DataContext="{Binding #customMenuUsage}"
			>

			<StackPanel>
				<actipro:AdvancedTabControl x:Name="customMenuUsage" MenuOpening="OnCustomMenuUsageMenuOpening" TabOverflowBehavior="Menu">
					<actipro:AdvancedTabItem Header="Static Context Flyout">
						<actipro:AdvancedTabItem.ContextFlyout>
							<MenuFlyout OverlayDismissEventPassThrough="True">
								<MenuItem Header="Explicit Menu Item 1" />
								<MenuItem Header="Explicit Menu Item 2" />
							</MenuFlyout>
						</actipro:AdvancedTabItem.ContextFlyout>
						<TextBox IsReadOnly="True" Text="This tab explicitly defines a context flyout." Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem x:Name="modifiedContextMenuTabItem" Header="Modified Context Flyout">
						<actipro:AdvancedTabItem.ContextFlyout>
							<MenuFlyout OverlayDismissEventPassThrough="True">
								<MenuItem Header="Explicit Menu Item 1" />
								<MenuItem Header="Explicit Menu Item 2" />
							</MenuFlyout>
						</actipro:AdvancedTabItem.ContextFlyout>
						<TextBox IsReadOnly="True" Text="This tab explicitly defines a context flyout modified at run-time." Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem x:Name="customContextMenuTabItem" Header="Custom Context Flyout">
						<TextBox IsReadOnly="True" Text="This tab's context flyout is fully defined at run-time." Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
				</actipro:AdvancedTabControl>
			</StackPanel>

			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<!-- The MenuOpening event is used to customize context menus -->
<actipro:AdvancedTabControl MenuOpening="OnMenuOpening" TabOverflowBehavior="Menu">

	<!-- Static Context Flyout -->
	<actipro:AdvancedTabItem Header="Static Context Flyout">
		<actipro:AdvancedTabItem.ContextFlyout>
			<MenuFlyout OverlayDismissEventPassThrough="True">
				<MenuItem Header="Explicit Menu Item 1" />
				<MenuItem Header="Explicit Menu Item 2" />
			</MenuFlyout>
		</actipro:AdvancedTabItem.ContextFlyout>
		...
	</actipro:AdvancedTabItem>

	<!-- Modified Context Flyout (see OnMenuOpening in code behind) -->
	<actipro:AdvancedTabItem x:Name="modifiedContextMenuTabItem" Header="Modified Context Flyout">
		<actipro:AdvancedTabItem.ContextFlyout>
			<MenuFlyout OverlayDismissEventPassThrough="True">
				<MenuItem Header="Explicit Menu Item 1" />
				<MenuItem Header="Explicit Menu Item 2" />
			</MenuFlyout>
		</actipro:AdvancedTabItem.ContextFlyout>
		...
	</actipro:AdvancedTabItem>

	<!-- Custom Context Flyout (see OnMenuOpening in code behind) -->
	<actipro:AdvancedTabItem x:Name="customContextMenuTabItem" Header="Custom Context Flyout">
		...
	</actipro:AdvancedTabItem>

</actipro:AdvancedTabControl>
					]]>
				</sampleBrowser:CodeExample>
				<sampleBrowser:CodeExample Language="C#" xml:space="preserve">
					<![CDATA[
// This method is invoked to handle the AdvancedTabControl.MenuOpening event
private void OnMenuOpening(object? sender, AdvancedTabControlMenuEventArgs e) {
	const string CustomMenuTag = "CustomMenu";

	if (e.TabItem is null) {
		//
		// Overflow Menu
		//

		if (e.Menu is not null) {
			bool addSeparator = true;

			// Update the text of the selected tab
			foreach (var menuItem in e.Menu.Items.OfType<MenuItem>()) {
				if (menuItem.CommandParameter is AdvancedTabItem tabItem) {
					menuItem.Header = tabItem.Header?.ToString() + (tabItem.IsSelected ? " (Selected)" : null);
				}
			}

			// Look for previous custom menu item already in the menu
			var customMenuItem = e.Menu.Items.OfType<MenuItem>().FirstOrDefault(x => x.Tag?.ToString() == CustomMenuTag);
			if (customMenuItem is not null) {
				// Separator will have already been added
				addSeparator = false;

				// Remove the old custom item
				e.Menu.Items.Remove(customMenuItem);
			}

			if (addSeparator)
				e.Menu.Items.Add(new Separator());

			// Add the custom menu item
			e.Menu.Items.Add(new MenuItem() { Header = "Modified: " + DateTime.Now.ToLongTimeString(), Tag = CustomMenuTag });
		}
	}
	else if (e.TabItem is not null) {
		//
		// Tab Context Menu
		//

		if (e.TabItem == modifiedContextMenuTabItem) {
			// Modify the existing menu
			if (e.Menu is not null) {
				bool addSeparator = true;

				// Look for previous custom menu item already in the menu
				var customMenuItem = e.Menu.Items.OfType<MenuItem>().FirstOrDefault(x => x.Tag?.ToString() == CustomMenuTag);
				if (customMenuItem is not null) {
					// Separator will have already been added
					addSeparator = false;

					// Remove the old custom item
					e.Menu.Items.Remove(customMenuItem);
				}

				if (addSeparator)
					e.Menu.Items.Add(new Separator());

				// Add the custom menu item
				e.Menu.Items.Add(new MenuItem() { Header = "Modified: " + DateTime.Now.ToLongTimeString(), Tag = CustomMenuTag });
			}
		}
		else if (e.TabItem == customContextMenuTabItem) {
			// Create a completely new menu
			var menu = new MenuFlyout() { OverlayDismissEventPassThrough = true };
			menu.Items.Add("Custom Menu Item 1");
			menu.Items.Add("Custom Menu Item 2");
			menu.Items.Add(new Separator());
			menu.Items.Add("Created: " + DateTime.Now.ToLongTimeString());

			// Pass the menu back to the event
			e.Menu = menu;
		}
	}
}
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Tinting and flashing"
			Footer="Tint or flash individual tabs to attract user attention."
			DataContext="{Binding #tintAndFlashUsage}"
			>

			<actipro:AdvancedTabControl x:Name="tintAndFlashUsage">
				<actipro:AdvancedTabItem Header="Untinted">
					<TextBox Text="This tab is untinted" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Tint Green" TintColor="Green">
					<TextBox Text="This tab is tinted green" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Tint Blue" TintColor="Blue">
					<TextBox Text="This tab is tinted blue" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem x:Name="flashingTabItem" Header="Flash Red" FlashColor="Red" FlashMode="Smooth">
					<TextBox Text="This tab will flash red using the selected flash mode animation" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
			</actipro:AdvancedTabControl>

			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="Flash mode" />
						<ComboBox SelectedItem="{Binding #flashingTabItem.FlashMode}" ItemsSource="{actipro:DelimitedArray 'Blink, Smooth', Type={x:Type actipro:TabFlashMode}}" />
					</StackPanel>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:AdvancedTabControl ... >

	<!-- Tinted -->
	<actipro:AdvancedTabItem Header="Tint Green" TintColor="Green">
		...
	</actipro:AdvancedTabItem>
	
	<!-- Flashing -->
	<actipro:AdvancedTabItem Header="Flash Red" FlashColor="Red" FlashMode="$(FlashMode)">
		...
	</actipro:AdvancedTabItem>
	
	...

</actipro:AdvancedTabControl>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="FlashMode" Value="{Binding #flashingTabItem.FlashMode}" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Keyboard navigation"
			Footer="Use keyboard shortcuts to activate individual tabs or switch between next and previous tabs."
			DataContext="{Binding #keyboardUsage}"
			>

			<actipro:AdvancedTabControl x:Name="keyboardUsage" CanTabsPromote="False">
				<actipro:AdvancedTabItem Header="Pinned 1" LayoutKind="Pinned">
					<TextBox Text="{Binding #root.ActivatePinnedTab1KeyGestureText, StringFormat='{}{0} will activate this pinned tab'}" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Pinned 2" LayoutKind="Pinned">
					<TextBox Text="{Binding #root.ActivatePinnedTab2KeyGestureText, StringFormat='{}{0} will activate this pinned tab'}" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Normal 1">
					<TextBox Text="{Binding #root.ActivateNormalTab1KeyGestureText, StringFormat='{}{0} will activate this normal tab'}" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Normal 2">
					<TextBox Text="{Binding #root.ActivateNormalTab2KeyGestureText, StringFormat='{}{0} will activate this normal tab'}" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Preview 1" LayoutKind="Preview">
					<TextBox Text="{Binding #root.ActivatePreviewTab1KeyGestureText, StringFormat='{}{0} will activate this preview tab'}" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
				<actipro:AdvancedTabItem Header="Preview 2" LayoutKind="Preview">
					<TextBox Text="{Binding #root.ActivatePreviewTab2KeyGestureText, StringFormat='{}{0} will activate this preview tab'}" Margin="10" AcceptsReturn="True" />
				</actipro:AdvancedTabItem>
			</actipro:AdvancedTabControl>

			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<StackPanel.Styles>
						<Style Selector="TextBlock:disabled">
							<Setter Property="Foreground" Value="{actipro:ThemeResource DefaultForegroundBrushDisabled}" />
						</Style>
					</StackPanel.Styles>
					<CheckBox x:Name="isTabAccessEnabledCheckBox" IsChecked="{Binding IsTabKeyboardAccessEnabled}">Is tab access enabled</CheckBox>
					<StackPanel IsEnabled="{Binding #isTabAccessEnabledCheckBox.IsChecked}" TextElement.Foreground="{actipro:ThemeResource DefaultForegroundBrushTertiary}">
						<TextBlock>
							<Run FontWeight="DemiBold" Text="Normal Tabs: " /><Run Text="{Binding #root.ActivateNormalTab1KeyGestureText}" />, <Run Text="{Binding #root.ActivateNormalTab2KeyGestureText}" />
						</TextBlock>
						<TextBlock>
							<Run FontWeight="DemiBold" Text="Pinned Tabs: " /><Run Text="{Binding #root.ActivatePinnedTab1KeyGestureText}" />, <Run Text="{Binding #root.ActivatePinnedTab2KeyGestureText}" />
						</TextBlock>
						<TextBlock>
							<Run FontWeight="DemiBold" Text="Preview Tabs: " /><Run Text="{Binding #root.ActivatePreviewTab1KeyGestureText}" />, <Run Text="{Binding #root.ActivatePreviewTab2KeyGestureText}" />
						</TextBlock>
					</StackPanel>
					<CheckBox x:Name="isTabSwitchingEnabledCheckBox" Margin="0,10,0,0" IsChecked="{Binding IsTabKeyboardSwitchingEnabled}">Is tab switching enabled</CheckBox>
					<StackPanel IsEnabled="{Binding #isTabSwitchingEnabledCheckBox.IsChecked}" TextElement.Foreground="{actipro:ThemeResource DefaultForegroundBrushTertiary}">
						<TextBlock>
							<Run FontWeight="DemiBold" Text="Next Tab: " />
							<Run Text="{Binding ActivateNextTabKeyGesture}" />
						</TextBlock>
						<TextBlock>
							<Run FontWeight="DemiBold" Text="Previous Tab: " />
							<Run Text="{Binding ActivatePreviousTabKeyGesture}" />
						</TextBlock>
					</StackPanel>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<!--
The various KeyGesture and KeyModifiers properties are included with their
default values for informational purposes only and can be deleted if unchanged.
-->
<actipro:AdvancedTabControl$(IsTabKeyboardAccessEnabledAttribute)$(IsTabKeyboardSwitchingEnabledAttribute) ...
	ActivateNextTabKeyGesture="Ctrl+Tab"
	ActivatePreviousTabKeyGesture="Ctrl+Shift+Tab"
	ActivateNormalTabKeyModifiers="Control"
	ActivatePinnedTabKeyModifiers="Control, Alt"
	ActivatePreviewTabKeyModifiers="Control, Shift"
	>

	...

</actipro:AdvancedTabControl>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="IsTabKeyboardAccessEnabledAttribute"
															   IsEnabled="{Binding !IsTabKeyboardAccessEnabled}"
															   Value=" IsTabKeyboardAccessEnabled=&quot;False&quot;" />
						<sampleBrowser:CodeExampleSubstitution Key="IsTabKeyboardSwitchingEnabledAttribute"
															   IsEnabled="{Binding !IsTabKeyboardSwitchingEnabled}"
															   Value=" IsTabKeyboardSwitchingEnabled=&quot;False&quot;" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Tab styling"
			Footer="Customize tab shape and spacing for a distinct appearance."
			DataContext="{Binding #tabStylingUsage}"
			>

			<StackPanel>
				<actipro:AdvancedTabControl x:Name="tabStylingUsage" TabSpacing="-5" TabNearSlantExtent="10">
					<actipro:AdvancedTabItem Header="Document1.txt" Icon="/Images/Icons/RichTextDocument16.png">
						<TextBox Text="Content 1" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document2.txt" Icon="/Images/Icons/RichTextDocument16.png">
						<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document3.txt" Icon="/Images/Icons/RichTextDocument16.png">
						<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
				</actipro:AdvancedTabControl>
			</StackPanel>

			<sampleBrowser:ControlExample.Options>
				<StackPanel Spacing="10">
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="{Binding TabSpacing, StringFormat='Spacing: {0}'}" />
						<Slider Value="{Binding TabSpacing}" Minimum="-20" Maximum="20" IsSnapToTickEnabled="True" TickFrequency="1" />
					</StackPanel>
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="{Binding TabNearSlantExtent, StringFormat='Near slant: {0}'}" />
						<Slider Value="{Binding TabNearSlantExtent}" Minimum="0" Maximum="10" IsSnapToTickEnabled="True" TickFrequency="1" />
					</StackPanel>
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="{Binding TabFarSlantExtent, StringFormat='Far slant: {0}'}" />
						<Slider Value="{Binding TabFarSlantExtent}" Minimum="0" Maximum="10" IsSnapToTickEnabled="True" TickFrequency="1" />
					</StackPanel>
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="{Binding MinTabExtent, StringFormat='Min extent: {0}'}" />
						<Slider Value="{Binding MinTabExtent}" Minimum="10" Maximum="200" IsSnapToTickEnabled="True" TickFrequency="10" />
					</StackPanel>
					<StackPanel>
						<TextBlock Classes="theme-form-control-label" Text="{Binding MaxTabExtent, StringFormat='Max extent: {0}'}" />
						<Slider Value="{Binding MaxTabExtent}" Minimum="10" Maximum="200" IsSnapToTickEnabled="True" TickFrequency="10" />
					</StackPanel>
				</StackPanel>
			</sampleBrowser:ControlExample.Options>
			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<actipro:AdvancedTabControl
	TabSpacing="$(TabSpacing)"
	TabNearSlantExtent="$(TabNearSlantExtent)"
	TabFarSlantExtent="$(TabFarSlantExtent)"
	MinTabExtent="$(MinTabExtent)"
	MaxTabExtent="$(MaxTabExtent)"
	>

	...

</actipro:AdvancedTabControl>
					]]>
					<sampleBrowser:CodeExample.Substitutions>
						<sampleBrowser:CodeExampleSubstitution Key="TabSpacing" Value="{Binding TabSpacing}" />
						<sampleBrowser:CodeExampleSubstitution Key="TabNearSlantExtent" Value="{Binding TabNearSlantExtent}" />
						<sampleBrowser:CodeExampleSubstitution Key="TabFarSlantExtent" Value="{Binding TabFarSlantExtent}" />
						<sampleBrowser:CodeExampleSubstitution Key="MinTabExtent" Value="{Binding MinTabExtent}" />
						<sampleBrowser:CodeExampleSubstitution Key="MaxTabExtent" Value="{Binding MaxTabExtent}" />
					</sampleBrowser:CodeExample.Substitutions>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


		<sampleBrowser:ControlExample
			Header="Tab style gallery"
			>

			<StackPanel Spacing="10">
				<actipro:AdvancedTabControl HasNewTabButton="True">
					<actipro:AdvancedTabItem Header="Document1.txt">
						<TextBox Text="Default tabs with new tab button" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document2.txt">
						<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document3.txt">
						<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
				</actipro:AdvancedTabControl>

				<actipro:AdvancedTabControl TabCornerRadius="8,8,0,0" TabPadding="10,4">
					<actipro:AdvancedTabItem Header="Document1.txt">
						<TextBox Text="Rounded rectangle tabs" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document2.txt">
						<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document3.txt">
						<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
				</actipro:AdvancedTabControl>

				<actipro:AdvancedTabControl TabNearSlantExtent="5" TabFarSlantExtent="5">
					<actipro:AdvancedTabItem Header="Document1.txt">
						<TextBox Text="Trapezoid tabs" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document2.txt">
						<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document3.txt">
						<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
				</actipro:AdvancedTabControl>

				<actipro:AdvancedTabControl MinTabExtent="20" MaxTabExtent="200" TabCornerRadius="2"
											TabNearSlantExtent="8" TabFarSlantExtent="8" TabPadding="5,4" TabSpacing="-10">
					<actipro:AdvancedTabItem Header="Document1.txt">
						<TextBox Text="Overlapping trapezoid tabs" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document2.txt">
						<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document3.txt">
						<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
				</actipro:AdvancedTabControl>

				<actipro:AdvancedTabControl TabCornerRadius="5,3,0,0" TabNearSlantExtent="10" TabSpacing="-5">
					<actipro:AdvancedTabItem Header="Document1.txt">
						<TextBox Text="Curved, slanted, overlapping front tabs" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document2.txt">
						<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document3.txt">
						<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
				</actipro:AdvancedTabControl>

				<actipro:AdvancedTabControl TabCornerRadius="3,5,3,0" TabSpacing="3" TabFarSlantExtent="8">
					<actipro:AdvancedTabItem Header="Document1.txt">
						<TextBox Text="Curved and spaced tabs" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document2.txt">
						<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document3.txt">
						<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
				</actipro:AdvancedTabControl>

				<actipro:AdvancedTabControl MinTabExtent="150" MaxTabExtent="150" TabPadding="15,6">
					<actipro:AdvancedTabItem Header="Document1.txt">
						<TextBox Text="Fixed tab size of 150px with additional padding" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document2.txt">
						<TextBox Text="Content 2" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
					<actipro:AdvancedTabItem Header="Document3.txt">
						<TextBox Text="Content 3" Margin="10" AcceptsReturn="True" />
					</actipro:AdvancedTabItem>
				</actipro:AdvancedTabControl>
			</StackPanel>

			<sampleBrowser:ControlExample.CodeExamples>
				<sampleBrowser:CodeExample xml:space="preserve">
					<![CDATA[
<!-- Default tabs with new tab button -->
<actipro:AdvancedTabControl HasNewTabButton="True">
	...
</actipro:AdvancedTabControl>

<!-- Rounded rectangle tabs -->
<actipro:AdvancedTabControl TabCornerRadius="8,8,0,0" TabPadding="10,4">
	...
</actipro:AdvancedTabControl>

<!-- Trapezoid tabs -->
<actipro:AdvancedTabControl TabNearSlantExtent="5" TabFarSlantExtent="5">
	...
</actipro:AdvancedTabControl>

<!-- Overlapping trapezoid tabs -->
<actipro:AdvancedTabControl
	MinTabExtent="20" MaxTabExtent="200"
	TabCornerRadius="2" TabPadding="5,4" TabSpacing="-10"
	TabNearSlantExtent="8" TabFarSlantExtent="8"
	>
	...
</actipro:AdvancedTabControl>

<!-- Curved, slanted, overlapping front tabs -->
<actipro:AdvancedTabControl TabCornerRadius="5,3,0,0" TabNearSlantExtent="10" TabSpacing="-5">
	...
</actipro:AdvancedTabControl>

<!-- Curved and spaced tabs -->
<actipro:AdvancedTabControl TabCornerRadius="3,5,3,0" TabSpacing="3" TabFarSlantExtent="8">
	...
</actipro:AdvancedTabControl>

<!-- Fixed tab size of 150px with additional padding -->
<actipro:AdvancedTabControl MinTabExtent="150" MaxTabExtent="150" TabPadding="15,6">
	...
</actipro:AdvancedTabControl>
					]]>
				</sampleBrowser:CodeExample>
			</sampleBrowser:ControlExample.CodeExamples>
		</sampleBrowser:ControlExample>


	</sampleBrowser:ControlExampleItemsControl>

</UserControl>
